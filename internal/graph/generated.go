// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	"bytes"
	"context"
	"embed"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/glinharesb/forgottenserver-graphql-api/internal/models"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Account() AccountResolver
	AccountBan() AccountBanResolver
	Guild() GuildResolver
	GuildInvite() GuildInviteResolver
	GuildMembership() GuildMembershipResolver
	GuildRank() GuildRankResolver
	GuildWar() GuildWarResolver
	House() HouseResolver
	MarketHistory() MarketHistoryResolver
	MarketOffer() MarketOfferResolver
	Mutation() MutationResolver
	Player() PlayerResolver
	Query() QueryResolver
	VipEntry() VipEntryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Account struct {
		Bans          func(childComplexity int) int
		Creation      func(childComplexity int) int
		Email         func(childComplexity int) int
		ID            func(childComplexity int) int
		Name          func(childComplexity int) int
		Players       func(childComplexity int) int
		PremiumEndsAt func(childComplexity int) int
		Storage       func(childComplexity int) int
		Type          func(childComplexity int) int
		VipList       func(childComplexity int) int
	}

	AccountBan struct {
		Account   func(childComplexity int) int
		AccountID func(childComplexity int) int
		BannedAt  func(childComplexity int) int
		BannedBy  func(childComplexity int) int
		ExpiresAt func(childComplexity int) int
		Reason    func(childComplexity int) int
	}

	AccountStorage struct {
		AccountID func(childComplexity int) int
		Key       func(childComplexity int) int
		Value     func(childComplexity int) int
	}

	Guild struct {
		CreationData func(childComplexity int) int
		ID           func(childComplexity int) int
		MOTD         func(childComplexity int) int
		Members      func(childComplexity int) int
		Name         func(childComplexity int) int
		Owner        func(childComplexity int) int
		OwnerID      func(childComplexity int) int
		Ranks        func(childComplexity int) int
	}

	GuildInvite struct {
		Guild    func(childComplexity int) int
		GuildID  func(childComplexity int) int
		Player   func(childComplexity int) int
		PlayerID func(childComplexity int) int
	}

	GuildMembership struct {
		Guild    func(childComplexity int) int
		GuildID  func(childComplexity int) int
		Nick     func(childComplexity int) int
		Player   func(childComplexity int) int
		PlayerID func(childComplexity int) int
		Rank     func(childComplexity int) int
		RankID   func(childComplexity int) int
	}

	GuildRank struct {
		Guild   func(childComplexity int) int
		GuildID func(childComplexity int) int
		ID      func(childComplexity int) int
		Level   func(childComplexity int) int
		Name    func(childComplexity int) int
	}

	GuildWar struct {
		Ended   func(childComplexity int) int
		Guild1  func(childComplexity int) int
		Guild2  func(childComplexity int) int
		ID      func(childComplexity int) int
		Kills   func(childComplexity int) int
		Name1   func(childComplexity int) int
		Name2   func(childComplexity int) int
		Started func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	GuildWarKill struct {
		ID          func(childComplexity int) int
		Killer      func(childComplexity int) int
		KillerGuild func(childComplexity int) int
		Target      func(childComplexity int) int
		TargetGuild func(childComplexity int) int
		Time        func(childComplexity int) int
		WarID       func(childComplexity int) int
	}

	House struct {
		Beds          func(childComplexity int) int
		Bid           func(childComplexity int) int
		BidEnd        func(childComplexity int) int
		HighestBidder func(childComplexity int) int
		ID            func(childComplexity int) int
		LastBid       func(childComplexity int) int
		Name          func(childComplexity int) int
		Owner         func(childComplexity int) int
		Paid          func(childComplexity int) int
		Rent          func(childComplexity int) int
		Size          func(childComplexity int) int
		Town          func(childComplexity int) int
		TownID        func(childComplexity int) int
		Warnings      func(childComplexity int) int
	}

	HouseList struct {
		HouseID func(childComplexity int) int
		List    func(childComplexity int) int
		ListID  func(childComplexity int) int
	}

	MarketHistory struct {
		Amount    func(childComplexity int) int
		ExpiresAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Inserted  func(childComplexity int) int
		ItemType  func(childComplexity int) int
		Player    func(childComplexity int) int
		PlayerID  func(childComplexity int) int
		Price     func(childComplexity int) int
		Sale      func(childComplexity int) int
		State     func(childComplexity int) int
	}

	MarketOffer struct {
		Amount    func(childComplexity int) int
		Anonymous func(childComplexity int) int
		Created   func(childComplexity int) int
		ID        func(childComplexity int) int
		ItemType  func(childComplexity int) int
		Player    func(childComplexity int) int
		PlayerID  func(childComplexity int) int
		Price     func(childComplexity int) int
		Sale      func(childComplexity int) int
	}

	Mutation struct {
		AcceptGuildInvite func(childComplexity int, guildID string, playerID string) int
		BanAccount        func(childComplexity int, input models.BanAccountInput) int
		BidHouse          func(childComplexity int, houseID string, playerID string, bidAmount int) int
		CreateAccount     func(childComplexity int, input models.CreateAccountInput) int
		CreateGuild       func(childComplexity int, input models.CreateGuildInput) int
		CreateMarketOffer func(childComplexity int, input models.CreateMarketOfferInput) int
		CreatePlayer      func(childComplexity int, input models.CreatePlayerInput) int
		CreateTown        func(childComplexity int, input models.CreateTownInput) int
		InviteToGuild     func(childComplexity int, guildID string, playerID string) int
	}

	Player struct {
		Account    func(childComplexity int) int
		AccountID  func(childComplexity int) int
		Balance    func(childComplexity int) int
		Cap        func(childComplexity int) int
		Deaths     func(childComplexity int) int
		Experience func(childComplexity int) int
		Guild      func(childComplexity int) int
		Health     func(childComplexity int) int
		HealthMax  func(childComplexity int) int
		ID         func(childComplexity int) int
		LastLogin  func(childComplexity int) int
		Level      func(childComplexity int) int
		LookAddons func(childComplexity int) int
		LookBody   func(childComplexity int) int
		LookFeet   func(childComplexity int) int
		LookHead   func(childComplexity int) int
		LookLegs   func(childComplexity int) int
		LookType   func(childComplexity int) int
		MagLevel   func(childComplexity int) int
		Mana       func(childComplexity int) int
		ManaMax    func(childComplexity int) int
		Name       func(childComplexity int) int
		PosX       func(childComplexity int) int
		PosY       func(childComplexity int) int
		PosZ       func(childComplexity int) int
		Sex        func(childComplexity int) int
		Soul       func(childComplexity int) int
		Town       func(childComplexity int) int
		TownID     func(childComplexity int) int
		Vocation   func(childComplexity int) int
	}

	PlayerDeath struct {
		IsPlayer           func(childComplexity int) int
		KilledBy           func(childComplexity int) int
		Level              func(childComplexity int) int
		MostDamageBy       func(childComplexity int) int
		MostDamageIsPlayer func(childComplexity int) int
		PlayerID           func(childComplexity int) int
		Time               func(childComplexity int) int
	}

	PlayerStorage struct {
		Key      func(childComplexity int) int
		PlayerID func(childComplexity int) int
		Value    func(childComplexity int) int
	}

	Query struct {
		Account       func(childComplexity int, id string) int
		Accounts      func(childComplexity int, limit *int) int
		Guild         func(childComplexity int, id string) int
		GuildWars     func(childComplexity int, guildID *string) int
		Guilds        func(childComplexity int) int
		House         func(childComplexity int, id string) int
		Houses        func(childComplexity int, townID *string) int
		MarketHistory func(childComplexity int, playerID string) int
		MarketOffers  func(childComplexity int, itemType *int) int
		Player        func(childComplexity int, id string) int
		Players       func(childComplexity int, accountID string) int
		PlayersOnline func(childComplexity int) int
		Town          func(childComplexity int, id string) int
		Towns         func(childComplexity int) int
	}

	Town struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
		PosX func(childComplexity int) int
		PosY func(childComplexity int) int
		PosZ func(childComplexity int) int
	}

	VipEntry struct {
		AccountID   func(childComplexity int) int
		Description func(childComplexity int) int
		Icon        func(childComplexity int) int
		Notify      func(childComplexity int) int
		Player      func(childComplexity int) int
		PlayerID    func(childComplexity int) int
	}
}

type AccountResolver interface {
	Players(ctx context.Context, obj *models.Account) ([]*models.Player, error)
	Bans(ctx context.Context, obj *models.Account) ([]*models.AccountBan, error)
	Storage(ctx context.Context, obj *models.Account) ([]*models.AccountStorage, error)
	VipList(ctx context.Context, obj *models.Account) ([]*models.VipEntry, error)
}
type AccountBanResolver interface {
	Account(ctx context.Context, obj *models.AccountBan) (*models.Account, error)

	BannedBy(ctx context.Context, obj *models.AccountBan) (*models.Player, error)
}
type GuildResolver interface {
	Owner(ctx context.Context, obj *models.Guild) (*models.Player, error)

	Ranks(ctx context.Context, obj *models.Guild) ([]*models.GuildRank, error)
	Members(ctx context.Context, obj *models.Guild) ([]*models.GuildMembership, error)
}
type GuildInviteResolver interface {
	Player(ctx context.Context, obj *models.GuildInvite) (*models.Player, error)
	Guild(ctx context.Context, obj *models.GuildInvite) (*models.Guild, error)
}
type GuildMembershipResolver interface {
	Player(ctx context.Context, obj *models.GuildMembership) (*models.Player, error)

	Guild(ctx context.Context, obj *models.GuildMembership) (*models.Guild, error)

	Rank(ctx context.Context, obj *models.GuildMembership) (*models.GuildRank, error)
}
type GuildRankResolver interface {
	Guild(ctx context.Context, obj *models.GuildRank) (*models.Guild, error)
}
type GuildWarResolver interface {
	Kills(ctx context.Context, obj *models.GuildWar) ([]*models.GuildWarKill, error)
}
type HouseResolver interface {
	Town(ctx context.Context, obj *models.House) (*models.Town, error)
}
type MarketHistoryResolver interface {
	Player(ctx context.Context, obj *models.MarketHistory) (*models.Player, error)
}
type MarketOfferResolver interface {
	Player(ctx context.Context, obj *models.MarketOffer) (*models.Player, error)
}
type MutationResolver interface {
	CreateAccount(ctx context.Context, input models.CreateAccountInput) (*models.Account, error)
	BanAccount(ctx context.Context, input models.BanAccountInput) (*models.AccountBan, error)
	CreatePlayer(ctx context.Context, input models.CreatePlayerInput) (*models.Player, error)
	CreateTown(ctx context.Context, input models.CreateTownInput) (*models.Town, error)
	CreateGuild(ctx context.Context, input models.CreateGuildInput) (*models.Guild, error)
	InviteToGuild(ctx context.Context, guildID string, playerID string) (bool, error)
	AcceptGuildInvite(ctx context.Context, guildID string, playerID string) (bool, error)
	BidHouse(ctx context.Context, houseID string, playerID string, bidAmount int) (*models.House, error)
	CreateMarketOffer(ctx context.Context, input models.CreateMarketOfferInput) (*models.MarketOffer, error)
}
type PlayerResolver interface {
	Account(ctx context.Context, obj *models.Player) (*models.Account, error)

	Town(ctx context.Context, obj *models.Player) (*models.Town, error)

	Deaths(ctx context.Context, obj *models.Player) ([]*models.PlayerDeath, error)
	Guild(ctx context.Context, obj *models.Player) (*models.GuildMembership, error)
}
type QueryResolver interface {
	Account(ctx context.Context, id string) (*models.Account, error)
	Accounts(ctx context.Context, limit *int) ([]*models.Account, error)
	Player(ctx context.Context, id string) (*models.Player, error)
	Players(ctx context.Context, accountID string) ([]*models.Player, error)
	PlayersOnline(ctx context.Context) ([]*models.Player, error)
	Town(ctx context.Context, id string) (*models.Town, error)
	Towns(ctx context.Context) ([]*models.Town, error)
	Guild(ctx context.Context, id string) (*models.Guild, error)
	Guilds(ctx context.Context) ([]*models.Guild, error)
	GuildWars(ctx context.Context, guildID *string) ([]*models.GuildWar, error)
	House(ctx context.Context, id string) (*models.House, error)
	Houses(ctx context.Context, townID *string) ([]*models.House, error)
	MarketOffers(ctx context.Context, itemType *int) ([]*models.MarketOffer, error)
	MarketHistory(ctx context.Context, playerID string) ([]*models.MarketHistory, error)
}
type VipEntryResolver interface {
	Player(ctx context.Context, obj *models.VipEntry) (*models.Player, error)
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(ctx context.Context, typeName, field string, childComplexity int, rawArgs map[string]any) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "Account.bans":
		if e.complexity.Account.Bans == nil {
			break
		}

		return e.complexity.Account.Bans(childComplexity), true
	case "Account.creation":
		if e.complexity.Account.Creation == nil {
			break
		}

		return e.complexity.Account.Creation(childComplexity), true
	case "Account.email":
		if e.complexity.Account.Email == nil {
			break
		}

		return e.complexity.Account.Email(childComplexity), true
	case "Account.id":
		if e.complexity.Account.ID == nil {
			break
		}

		return e.complexity.Account.ID(childComplexity), true
	case "Account.name":
		if e.complexity.Account.Name == nil {
			break
		}

		return e.complexity.Account.Name(childComplexity), true
	case "Account.players":
		if e.complexity.Account.Players == nil {
			break
		}

		return e.complexity.Account.Players(childComplexity), true
	case "Account.premiumEndsAt":
		if e.complexity.Account.PremiumEndsAt == nil {
			break
		}

		return e.complexity.Account.PremiumEndsAt(childComplexity), true
	case "Account.storage":
		if e.complexity.Account.Storage == nil {
			break
		}

		return e.complexity.Account.Storage(childComplexity), true
	case "Account.type":
		if e.complexity.Account.Type == nil {
			break
		}

		return e.complexity.Account.Type(childComplexity), true
	case "Account.vipList":
		if e.complexity.Account.VipList == nil {
			break
		}

		return e.complexity.Account.VipList(childComplexity), true

	case "AccountBan.account":
		if e.complexity.AccountBan.Account == nil {
			break
		}

		return e.complexity.AccountBan.Account(childComplexity), true
	case "AccountBan.accountId":
		if e.complexity.AccountBan.AccountID == nil {
			break
		}

		return e.complexity.AccountBan.AccountID(childComplexity), true
	case "AccountBan.bannedAt":
		if e.complexity.AccountBan.BannedAt == nil {
			break
		}

		return e.complexity.AccountBan.BannedAt(childComplexity), true
	case "AccountBan.bannedBy":
		if e.complexity.AccountBan.BannedBy == nil {
			break
		}

		return e.complexity.AccountBan.BannedBy(childComplexity), true
	case "AccountBan.expiresAt":
		if e.complexity.AccountBan.ExpiresAt == nil {
			break
		}

		return e.complexity.AccountBan.ExpiresAt(childComplexity), true
	case "AccountBan.reason":
		if e.complexity.AccountBan.Reason == nil {
			break
		}

		return e.complexity.AccountBan.Reason(childComplexity), true

	case "AccountStorage.accountId":
		if e.complexity.AccountStorage.AccountID == nil {
			break
		}

		return e.complexity.AccountStorage.AccountID(childComplexity), true
	case "AccountStorage.key":
		if e.complexity.AccountStorage.Key == nil {
			break
		}

		return e.complexity.AccountStorage.Key(childComplexity), true
	case "AccountStorage.value":
		if e.complexity.AccountStorage.Value == nil {
			break
		}

		return e.complexity.AccountStorage.Value(childComplexity), true

	case "Guild.creationData":
		if e.complexity.Guild.CreationData == nil {
			break
		}

		return e.complexity.Guild.CreationData(childComplexity), true
	case "Guild.id":
		if e.complexity.Guild.ID == nil {
			break
		}

		return e.complexity.Guild.ID(childComplexity), true
	case "Guild.motd":
		if e.complexity.Guild.MOTD == nil {
			break
		}

		return e.complexity.Guild.MOTD(childComplexity), true
	case "Guild.members":
		if e.complexity.Guild.Members == nil {
			break
		}

		return e.complexity.Guild.Members(childComplexity), true
	case "Guild.name":
		if e.complexity.Guild.Name == nil {
			break
		}

		return e.complexity.Guild.Name(childComplexity), true
	case "Guild.owner":
		if e.complexity.Guild.Owner == nil {
			break
		}

		return e.complexity.Guild.Owner(childComplexity), true
	case "Guild.ownerId":
		if e.complexity.Guild.OwnerID == nil {
			break
		}

		return e.complexity.Guild.OwnerID(childComplexity), true
	case "Guild.ranks":
		if e.complexity.Guild.Ranks == nil {
			break
		}

		return e.complexity.Guild.Ranks(childComplexity), true

	case "GuildInvite.guild":
		if e.complexity.GuildInvite.Guild == nil {
			break
		}

		return e.complexity.GuildInvite.Guild(childComplexity), true
	case "GuildInvite.guildId":
		if e.complexity.GuildInvite.GuildID == nil {
			break
		}

		return e.complexity.GuildInvite.GuildID(childComplexity), true
	case "GuildInvite.player":
		if e.complexity.GuildInvite.Player == nil {
			break
		}

		return e.complexity.GuildInvite.Player(childComplexity), true
	case "GuildInvite.playerId":
		if e.complexity.GuildInvite.PlayerID == nil {
			break
		}

		return e.complexity.GuildInvite.PlayerID(childComplexity), true

	case "GuildMembership.guild":
		if e.complexity.GuildMembership.Guild == nil {
			break
		}

		return e.complexity.GuildMembership.Guild(childComplexity), true
	case "GuildMembership.guildId":
		if e.complexity.GuildMembership.GuildID == nil {
			break
		}

		return e.complexity.GuildMembership.GuildID(childComplexity), true
	case "GuildMembership.nick":
		if e.complexity.GuildMembership.Nick == nil {
			break
		}

		return e.complexity.GuildMembership.Nick(childComplexity), true
	case "GuildMembership.player":
		if e.complexity.GuildMembership.Player == nil {
			break
		}

		return e.complexity.GuildMembership.Player(childComplexity), true
	case "GuildMembership.playerId":
		if e.complexity.GuildMembership.PlayerID == nil {
			break
		}

		return e.complexity.GuildMembership.PlayerID(childComplexity), true
	case "GuildMembership.rank":
		if e.complexity.GuildMembership.Rank == nil {
			break
		}

		return e.complexity.GuildMembership.Rank(childComplexity), true
	case "GuildMembership.rankId":
		if e.complexity.GuildMembership.RankID == nil {
			break
		}

		return e.complexity.GuildMembership.RankID(childComplexity), true

	case "GuildRank.guild":
		if e.complexity.GuildRank.Guild == nil {
			break
		}

		return e.complexity.GuildRank.Guild(childComplexity), true
	case "GuildRank.guildId":
		if e.complexity.GuildRank.GuildID == nil {
			break
		}

		return e.complexity.GuildRank.GuildID(childComplexity), true
	case "GuildRank.id":
		if e.complexity.GuildRank.ID == nil {
			break
		}

		return e.complexity.GuildRank.ID(childComplexity), true
	case "GuildRank.level":
		if e.complexity.GuildRank.Level == nil {
			break
		}

		return e.complexity.GuildRank.Level(childComplexity), true
	case "GuildRank.name":
		if e.complexity.GuildRank.Name == nil {
			break
		}

		return e.complexity.GuildRank.Name(childComplexity), true

	case "GuildWar.ended":
		if e.complexity.GuildWar.Ended == nil {
			break
		}

		return e.complexity.GuildWar.Ended(childComplexity), true
	case "GuildWar.guild1":
		if e.complexity.GuildWar.Guild1 == nil {
			break
		}

		return e.complexity.GuildWar.Guild1(childComplexity), true
	case "GuildWar.guild2":
		if e.complexity.GuildWar.Guild2 == nil {
			break
		}

		return e.complexity.GuildWar.Guild2(childComplexity), true
	case "GuildWar.id":
		if e.complexity.GuildWar.ID == nil {
			break
		}

		return e.complexity.GuildWar.ID(childComplexity), true
	case "GuildWar.kills":
		if e.complexity.GuildWar.Kills == nil {
			break
		}

		return e.complexity.GuildWar.Kills(childComplexity), true
	case "GuildWar.name1":
		if e.complexity.GuildWar.Name1 == nil {
			break
		}

		return e.complexity.GuildWar.Name1(childComplexity), true
	case "GuildWar.name2":
		if e.complexity.GuildWar.Name2 == nil {
			break
		}

		return e.complexity.GuildWar.Name2(childComplexity), true
	case "GuildWar.started":
		if e.complexity.GuildWar.Started == nil {
			break
		}

		return e.complexity.GuildWar.Started(childComplexity), true
	case "GuildWar.status":
		if e.complexity.GuildWar.Status == nil {
			break
		}

		return e.complexity.GuildWar.Status(childComplexity), true

	case "GuildWarKill.id":
		if e.complexity.GuildWarKill.ID == nil {
			break
		}

		return e.complexity.GuildWarKill.ID(childComplexity), true
	case "GuildWarKill.killer":
		if e.complexity.GuildWarKill.Killer == nil {
			break
		}

		return e.complexity.GuildWarKill.Killer(childComplexity), true
	case "GuildWarKill.killerGuild":
		if e.complexity.GuildWarKill.KillerGuild == nil {
			break
		}

		return e.complexity.GuildWarKill.KillerGuild(childComplexity), true
	case "GuildWarKill.target":
		if e.complexity.GuildWarKill.Target == nil {
			break
		}

		return e.complexity.GuildWarKill.Target(childComplexity), true
	case "GuildWarKill.targetGuild":
		if e.complexity.GuildWarKill.TargetGuild == nil {
			break
		}

		return e.complexity.GuildWarKill.TargetGuild(childComplexity), true
	case "GuildWarKill.time":
		if e.complexity.GuildWarKill.Time == nil {
			break
		}

		return e.complexity.GuildWarKill.Time(childComplexity), true
	case "GuildWarKill.warId":
		if e.complexity.GuildWarKill.WarID == nil {
			break
		}

		return e.complexity.GuildWarKill.WarID(childComplexity), true

	case "House.beds":
		if e.complexity.House.Beds == nil {
			break
		}

		return e.complexity.House.Beds(childComplexity), true
	case "House.bid":
		if e.complexity.House.Bid == nil {
			break
		}

		return e.complexity.House.Bid(childComplexity), true
	case "House.bidEnd":
		if e.complexity.House.BidEnd == nil {
			break
		}

		return e.complexity.House.BidEnd(childComplexity), true
	case "House.highestBidder":
		if e.complexity.House.HighestBidder == nil {
			break
		}

		return e.complexity.House.HighestBidder(childComplexity), true
	case "House.id":
		if e.complexity.House.ID == nil {
			break
		}

		return e.complexity.House.ID(childComplexity), true
	case "House.lastBid":
		if e.complexity.House.LastBid == nil {
			break
		}

		return e.complexity.House.LastBid(childComplexity), true
	case "House.name":
		if e.complexity.House.Name == nil {
			break
		}

		return e.complexity.House.Name(childComplexity), true
	case "House.owner":
		if e.complexity.House.Owner == nil {
			break
		}

		return e.complexity.House.Owner(childComplexity), true
	case "House.paid":
		if e.complexity.House.Paid == nil {
			break
		}

		return e.complexity.House.Paid(childComplexity), true
	case "House.rent":
		if e.complexity.House.Rent == nil {
			break
		}

		return e.complexity.House.Rent(childComplexity), true
	case "House.size":
		if e.complexity.House.Size == nil {
			break
		}

		return e.complexity.House.Size(childComplexity), true
	case "House.town":
		if e.complexity.House.Town == nil {
			break
		}

		return e.complexity.House.Town(childComplexity), true
	case "House.townId":
		if e.complexity.House.TownID == nil {
			break
		}

		return e.complexity.House.TownID(childComplexity), true
	case "House.warnings":
		if e.complexity.House.Warnings == nil {
			break
		}

		return e.complexity.House.Warnings(childComplexity), true

	case "HouseList.houseId":
		if e.complexity.HouseList.HouseID == nil {
			break
		}

		return e.complexity.HouseList.HouseID(childComplexity), true
	case "HouseList.list":
		if e.complexity.HouseList.List == nil {
			break
		}

		return e.complexity.HouseList.List(childComplexity), true
	case "HouseList.listId":
		if e.complexity.HouseList.ListID == nil {
			break
		}

		return e.complexity.HouseList.ListID(childComplexity), true

	case "MarketHistory.amount":
		if e.complexity.MarketHistory.Amount == nil {
			break
		}

		return e.complexity.MarketHistory.Amount(childComplexity), true
	case "MarketHistory.expiresAt":
		if e.complexity.MarketHistory.ExpiresAt == nil {
			break
		}

		return e.complexity.MarketHistory.ExpiresAt(childComplexity), true
	case "MarketHistory.id":
		if e.complexity.MarketHistory.ID == nil {
			break
		}

		return e.complexity.MarketHistory.ID(childComplexity), true
	case "MarketHistory.inserted":
		if e.complexity.MarketHistory.Inserted == nil {
			break
		}

		return e.complexity.MarketHistory.Inserted(childComplexity), true
	case "MarketHistory.itemType":
		if e.complexity.MarketHistory.ItemType == nil {
			break
		}

		return e.complexity.MarketHistory.ItemType(childComplexity), true
	case "MarketHistory.player":
		if e.complexity.MarketHistory.Player == nil {
			break
		}

		return e.complexity.MarketHistory.Player(childComplexity), true
	case "MarketHistory.playerId":
		if e.complexity.MarketHistory.PlayerID == nil {
			break
		}

		return e.complexity.MarketHistory.PlayerID(childComplexity), true
	case "MarketHistory.price":
		if e.complexity.MarketHistory.Price == nil {
			break
		}

		return e.complexity.MarketHistory.Price(childComplexity), true
	case "MarketHistory.sale":
		if e.complexity.MarketHistory.Sale == nil {
			break
		}

		return e.complexity.MarketHistory.Sale(childComplexity), true
	case "MarketHistory.state":
		if e.complexity.MarketHistory.State == nil {
			break
		}

		return e.complexity.MarketHistory.State(childComplexity), true

	case "MarketOffer.amount":
		if e.complexity.MarketOffer.Amount == nil {
			break
		}

		return e.complexity.MarketOffer.Amount(childComplexity), true
	case "MarketOffer.anonymous":
		if e.complexity.MarketOffer.Anonymous == nil {
			break
		}

		return e.complexity.MarketOffer.Anonymous(childComplexity), true
	case "MarketOffer.created":
		if e.complexity.MarketOffer.Created == nil {
			break
		}

		return e.complexity.MarketOffer.Created(childComplexity), true
	case "MarketOffer.id":
		if e.complexity.MarketOffer.ID == nil {
			break
		}

		return e.complexity.MarketOffer.ID(childComplexity), true
	case "MarketOffer.itemType":
		if e.complexity.MarketOffer.ItemType == nil {
			break
		}

		return e.complexity.MarketOffer.ItemType(childComplexity), true
	case "MarketOffer.player":
		if e.complexity.MarketOffer.Player == nil {
			break
		}

		return e.complexity.MarketOffer.Player(childComplexity), true
	case "MarketOffer.playerId":
		if e.complexity.MarketOffer.PlayerID == nil {
			break
		}

		return e.complexity.MarketOffer.PlayerID(childComplexity), true
	case "MarketOffer.price":
		if e.complexity.MarketOffer.Price == nil {
			break
		}

		return e.complexity.MarketOffer.Price(childComplexity), true
	case "MarketOffer.sale":
		if e.complexity.MarketOffer.Sale == nil {
			break
		}

		return e.complexity.MarketOffer.Sale(childComplexity), true

	case "Mutation.acceptGuildInvite":
		if e.complexity.Mutation.AcceptGuildInvite == nil {
			break
		}

		args, err := ec.field_Mutation_acceptGuildInvite_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AcceptGuildInvite(childComplexity, args["guildId"].(string), args["playerId"].(string)), true
	case "Mutation.banAccount":
		if e.complexity.Mutation.BanAccount == nil {
			break
		}

		args, err := ec.field_Mutation_banAccount_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BanAccount(childComplexity, args["input"].(models.BanAccountInput)), true
	case "Mutation.bidHouse":
		if e.complexity.Mutation.BidHouse == nil {
			break
		}

		args, err := ec.field_Mutation_bidHouse_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BidHouse(childComplexity, args["houseId"].(string), args["playerId"].(string), args["bidAmount"].(int)), true
	case "Mutation.createAccount":
		if e.complexity.Mutation.CreateAccount == nil {
			break
		}

		args, err := ec.field_Mutation_createAccount_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAccount(childComplexity, args["input"].(models.CreateAccountInput)), true
	case "Mutation.createGuild":
		if e.complexity.Mutation.CreateGuild == nil {
			break
		}

		args, err := ec.field_Mutation_createGuild_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateGuild(childComplexity, args["input"].(models.CreateGuildInput)), true
	case "Mutation.createMarketOffer":
		if e.complexity.Mutation.CreateMarketOffer == nil {
			break
		}

		args, err := ec.field_Mutation_createMarketOffer_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateMarketOffer(childComplexity, args["input"].(models.CreateMarketOfferInput)), true
	case "Mutation.createPlayer":
		if e.complexity.Mutation.CreatePlayer == nil {
			break
		}

		args, err := ec.field_Mutation_createPlayer_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePlayer(childComplexity, args["input"].(models.CreatePlayerInput)), true
	case "Mutation.createTown":
		if e.complexity.Mutation.CreateTown == nil {
			break
		}

		args, err := ec.field_Mutation_createTown_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTown(childComplexity, args["input"].(models.CreateTownInput)), true
	case "Mutation.inviteToGuild":
		if e.complexity.Mutation.InviteToGuild == nil {
			break
		}

		args, err := ec.field_Mutation_inviteToGuild_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InviteToGuild(childComplexity, args["guildId"].(string), args["playerId"].(string)), true

	case "Player.account":
		if e.complexity.Player.Account == nil {
			break
		}

		return e.complexity.Player.Account(childComplexity), true
	case "Player.accountId":
		if e.complexity.Player.AccountID == nil {
			break
		}

		return e.complexity.Player.AccountID(childComplexity), true
	case "Player.balance":
		if e.complexity.Player.Balance == nil {
			break
		}

		return e.complexity.Player.Balance(childComplexity), true
	case "Player.cap":
		if e.complexity.Player.Cap == nil {
			break
		}

		return e.complexity.Player.Cap(childComplexity), true
	case "Player.deaths":
		if e.complexity.Player.Deaths == nil {
			break
		}

		return e.complexity.Player.Deaths(childComplexity), true
	case "Player.experience":
		if e.complexity.Player.Experience == nil {
			break
		}

		return e.complexity.Player.Experience(childComplexity), true
	case "Player.guild":
		if e.complexity.Player.Guild == nil {
			break
		}

		return e.complexity.Player.Guild(childComplexity), true
	case "Player.health":
		if e.complexity.Player.Health == nil {
			break
		}

		return e.complexity.Player.Health(childComplexity), true
	case "Player.healthMax":
		if e.complexity.Player.HealthMax == nil {
			break
		}

		return e.complexity.Player.HealthMax(childComplexity), true
	case "Player.id":
		if e.complexity.Player.ID == nil {
			break
		}

		return e.complexity.Player.ID(childComplexity), true
	case "Player.lastLogin":
		if e.complexity.Player.LastLogin == nil {
			break
		}

		return e.complexity.Player.LastLogin(childComplexity), true
	case "Player.level":
		if e.complexity.Player.Level == nil {
			break
		}

		return e.complexity.Player.Level(childComplexity), true
	case "Player.lookAddons":
		if e.complexity.Player.LookAddons == nil {
			break
		}

		return e.complexity.Player.LookAddons(childComplexity), true
	case "Player.lookBody":
		if e.complexity.Player.LookBody == nil {
			break
		}

		return e.complexity.Player.LookBody(childComplexity), true
	case "Player.lookFeet":
		if e.complexity.Player.LookFeet == nil {
			break
		}

		return e.complexity.Player.LookFeet(childComplexity), true
	case "Player.lookHead":
		if e.complexity.Player.LookHead == nil {
			break
		}

		return e.complexity.Player.LookHead(childComplexity), true
	case "Player.lookLegs":
		if e.complexity.Player.LookLegs == nil {
			break
		}

		return e.complexity.Player.LookLegs(childComplexity), true
	case "Player.lookType":
		if e.complexity.Player.LookType == nil {
			break
		}

		return e.complexity.Player.LookType(childComplexity), true
	case "Player.magLevel":
		if e.complexity.Player.MagLevel == nil {
			break
		}

		return e.complexity.Player.MagLevel(childComplexity), true
	case "Player.mana":
		if e.complexity.Player.Mana == nil {
			break
		}

		return e.complexity.Player.Mana(childComplexity), true
	case "Player.manaMax":
		if e.complexity.Player.ManaMax == nil {
			break
		}

		return e.complexity.Player.ManaMax(childComplexity), true
	case "Player.name":
		if e.complexity.Player.Name == nil {
			break
		}

		return e.complexity.Player.Name(childComplexity), true
	case "Player.posX":
		if e.complexity.Player.PosX == nil {
			break
		}

		return e.complexity.Player.PosX(childComplexity), true
	case "Player.posY":
		if e.complexity.Player.PosY == nil {
			break
		}

		return e.complexity.Player.PosY(childComplexity), true
	case "Player.posZ":
		if e.complexity.Player.PosZ == nil {
			break
		}

		return e.complexity.Player.PosZ(childComplexity), true
	case "Player.sex":
		if e.complexity.Player.Sex == nil {
			break
		}

		return e.complexity.Player.Sex(childComplexity), true
	case "Player.soul":
		if e.complexity.Player.Soul == nil {
			break
		}

		return e.complexity.Player.Soul(childComplexity), true
	case "Player.town":
		if e.complexity.Player.Town == nil {
			break
		}

		return e.complexity.Player.Town(childComplexity), true
	case "Player.townId":
		if e.complexity.Player.TownID == nil {
			break
		}

		return e.complexity.Player.TownID(childComplexity), true
	case "Player.vocation":
		if e.complexity.Player.Vocation == nil {
			break
		}

		return e.complexity.Player.Vocation(childComplexity), true

	case "PlayerDeath.isPlayer":
		if e.complexity.PlayerDeath.IsPlayer == nil {
			break
		}

		return e.complexity.PlayerDeath.IsPlayer(childComplexity), true
	case "PlayerDeath.killedBy":
		if e.complexity.PlayerDeath.KilledBy == nil {
			break
		}

		return e.complexity.PlayerDeath.KilledBy(childComplexity), true
	case "PlayerDeath.level":
		if e.complexity.PlayerDeath.Level == nil {
			break
		}

		return e.complexity.PlayerDeath.Level(childComplexity), true
	case "PlayerDeath.mostDamageBy":
		if e.complexity.PlayerDeath.MostDamageBy == nil {
			break
		}

		return e.complexity.PlayerDeath.MostDamageBy(childComplexity), true
	case "PlayerDeath.mostDamageIsPlayer":
		if e.complexity.PlayerDeath.MostDamageIsPlayer == nil {
			break
		}

		return e.complexity.PlayerDeath.MostDamageIsPlayer(childComplexity), true
	case "PlayerDeath.playerId":
		if e.complexity.PlayerDeath.PlayerID == nil {
			break
		}

		return e.complexity.PlayerDeath.PlayerID(childComplexity), true
	case "PlayerDeath.time":
		if e.complexity.PlayerDeath.Time == nil {
			break
		}

		return e.complexity.PlayerDeath.Time(childComplexity), true

	case "PlayerStorage.key":
		if e.complexity.PlayerStorage.Key == nil {
			break
		}

		return e.complexity.PlayerStorage.Key(childComplexity), true
	case "PlayerStorage.playerId":
		if e.complexity.PlayerStorage.PlayerID == nil {
			break
		}

		return e.complexity.PlayerStorage.PlayerID(childComplexity), true
	case "PlayerStorage.value":
		if e.complexity.PlayerStorage.Value == nil {
			break
		}

		return e.complexity.PlayerStorage.Value(childComplexity), true

	case "Query.account":
		if e.complexity.Query.Account == nil {
			break
		}

		args, err := ec.field_Query_account_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Account(childComplexity, args["id"].(string)), true
	case "Query.accounts":
		if e.complexity.Query.Accounts == nil {
			break
		}

		args, err := ec.field_Query_accounts_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Accounts(childComplexity, args["limit"].(*int)), true
	case "Query.guild":
		if e.complexity.Query.Guild == nil {
			break
		}

		args, err := ec.field_Query_guild_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Guild(childComplexity, args["id"].(string)), true
	case "Query.guildWars":
		if e.complexity.Query.GuildWars == nil {
			break
		}

		args, err := ec.field_Query_guildWars_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GuildWars(childComplexity, args["guildId"].(*string)), true
	case "Query.guilds":
		if e.complexity.Query.Guilds == nil {
			break
		}

		return e.complexity.Query.Guilds(childComplexity), true
	case "Query.house":
		if e.complexity.Query.House == nil {
			break
		}

		args, err := ec.field_Query_house_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.House(childComplexity, args["id"].(string)), true
	case "Query.houses":
		if e.complexity.Query.Houses == nil {
			break
		}

		args, err := ec.field_Query_houses_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Houses(childComplexity, args["townId"].(*string)), true
	case "Query.marketHistory":
		if e.complexity.Query.MarketHistory == nil {
			break
		}

		args, err := ec.field_Query_marketHistory_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MarketHistory(childComplexity, args["playerId"].(string)), true
	case "Query.marketOffers":
		if e.complexity.Query.MarketOffers == nil {
			break
		}

		args, err := ec.field_Query_marketOffers_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MarketOffers(childComplexity, args["itemType"].(*int)), true
	case "Query.player":
		if e.complexity.Query.Player == nil {
			break
		}

		args, err := ec.field_Query_player_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Player(childComplexity, args["id"].(string)), true
	case "Query.players":
		if e.complexity.Query.Players == nil {
			break
		}

		args, err := ec.field_Query_players_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Players(childComplexity, args["accountId"].(string)), true
	case "Query.playersOnline":
		if e.complexity.Query.PlayersOnline == nil {
			break
		}

		return e.complexity.Query.PlayersOnline(childComplexity), true
	case "Query.town":
		if e.complexity.Query.Town == nil {
			break
		}

		args, err := ec.field_Query_town_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Town(childComplexity, args["id"].(string)), true
	case "Query.towns":
		if e.complexity.Query.Towns == nil {
			break
		}

		return e.complexity.Query.Towns(childComplexity), true

	case "Town.id":
		if e.complexity.Town.ID == nil {
			break
		}

		return e.complexity.Town.ID(childComplexity), true
	case "Town.name":
		if e.complexity.Town.Name == nil {
			break
		}

		return e.complexity.Town.Name(childComplexity), true
	case "Town.posX":
		if e.complexity.Town.PosX == nil {
			break
		}

		return e.complexity.Town.PosX(childComplexity), true
	case "Town.posY":
		if e.complexity.Town.PosY == nil {
			break
		}

		return e.complexity.Town.PosY(childComplexity), true
	case "Town.posZ":
		if e.complexity.Town.PosZ == nil {
			break
		}

		return e.complexity.Town.PosZ(childComplexity), true

	case "VipEntry.accountId":
		if e.complexity.VipEntry.AccountID == nil {
			break
		}

		return e.complexity.VipEntry.AccountID(childComplexity), true
	case "VipEntry.description":
		if e.complexity.VipEntry.Description == nil {
			break
		}

		return e.complexity.VipEntry.Description(childComplexity), true
	case "VipEntry.icon":
		if e.complexity.VipEntry.Icon == nil {
			break
		}

		return e.complexity.VipEntry.Icon(childComplexity), true
	case "VipEntry.notify":
		if e.complexity.VipEntry.Notify == nil {
			break
		}

		return e.complexity.VipEntry.Notify(childComplexity), true
	case "VipEntry.player":
		if e.complexity.VipEntry.Player == nil {
			break
		}

		return e.complexity.VipEntry.Player(childComplexity), true
	case "VipEntry.playerId":
		if e.complexity.VipEntry.PlayerID == nil {
			break
		}

		return e.complexity.VipEntry.PlayerID(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputBanAccountInput,
		ec.unmarshalInputCreateAccountInput,
		ec.unmarshalInputCreateGuildInput,
		ec.unmarshalInputCreateMarketOfferInput,
		ec.unmarshalInputCreatePlayerInput,
		ec.unmarshalInputCreateTownInput,
	)
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, opCtx.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

//go:embed "schema.graphqls"
var sourcesFS embed.FS

func sourceData(filename string) string {
	data, err := sourcesFS.ReadFile(filename)
	if err != nil {
		panic(fmt.Sprintf("codegen problem: %s not available", filename))
	}
	return string(data)
}

var sources = []*ast.Source{
	{Name: "schema.graphqls", Input: sourceData("schema.graphqls"), BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_acceptGuildInvite_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "guildId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["guildId"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "playerId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["playerId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_banAccount_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNBanAccountInput2githubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐBanAccountInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bidHouse_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "houseId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["houseId"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "playerId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["playerId"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "bidAmount", ec.unmarshalNInt2int)
	if err != nil {
		return nil, err
	}
	args["bidAmount"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_createAccount_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateAccountInput2githubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐCreateAccountInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createGuild_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateGuildInput2githubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐCreateGuildInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createMarketOffer_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateMarketOfferInput2githubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐCreateMarketOfferInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPlayer_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreatePlayerInput2githubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐCreatePlayerInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createTown_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateTownInput2githubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐCreateTownInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_inviteToGuild_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "guildId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["guildId"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "playerId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["playerId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "name", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_account_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_accounts_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "limit", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["limit"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_guildWars_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "guildId", ec.unmarshalOID2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["guildId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_guild_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_house_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_houses_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "townId", ec.unmarshalOID2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["townId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_marketHistory_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "playerId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["playerId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_marketOffers_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "itemType", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["itemType"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_player_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_players_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "accountId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["accountId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_town_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field___Directive_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2ᚖbool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Field_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2ᚖbool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2bool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2bool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Account_id(ctx context.Context, field graphql.CollectedField, obj *models.Account) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Account_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Account_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Account_name(ctx context.Context, field graphql.CollectedField, obj *models.Account) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Account_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Account_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Account_email(ctx context.Context, field graphql.CollectedField, obj *models.Account) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Account_email,
		func(ctx context.Context) (any, error) {
			return obj.Email, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Account_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Account_type(ctx context.Context, field graphql.CollectedField, obj *models.Account) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Account_type,
		func(ctx context.Context) (any, error) {
			return obj.Type, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Account_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Account_premiumEndsAt(ctx context.Context, field graphql.CollectedField, obj *models.Account) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Account_premiumEndsAt,
		func(ctx context.Context) (any, error) {
			return obj.PremiumEndsAt, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Account_premiumEndsAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Account_creation(ctx context.Context, field graphql.CollectedField, obj *models.Account) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Account_creation,
		func(ctx context.Context) (any, error) {
			return obj.Creation, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Account_creation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Account_players(ctx context.Context, field graphql.CollectedField, obj *models.Account) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Account_players,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Account().Players(ctx, obj)
		},
		nil,
		ec.marshalNPlayer2ᚕᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐPlayerᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Account_players(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Player_id(ctx, field)
			case "name":
				return ec.fieldContext_Player_name(ctx, field)
			case "accountId":
				return ec.fieldContext_Player_accountId(ctx, field)
			case "account":
				return ec.fieldContext_Player_account(ctx, field)
			case "level":
				return ec.fieldContext_Player_level(ctx, field)
			case "vocation":
				return ec.fieldContext_Player_vocation(ctx, field)
			case "health":
				return ec.fieldContext_Player_health(ctx, field)
			case "healthMax":
				return ec.fieldContext_Player_healthMax(ctx, field)
			case "experience":
				return ec.fieldContext_Player_experience(ctx, field)
			case "lookBody":
				return ec.fieldContext_Player_lookBody(ctx, field)
			case "lookFeet":
				return ec.fieldContext_Player_lookFeet(ctx, field)
			case "lookHead":
				return ec.fieldContext_Player_lookHead(ctx, field)
			case "lookLegs":
				return ec.fieldContext_Player_lookLegs(ctx, field)
			case "lookType":
				return ec.fieldContext_Player_lookType(ctx, field)
			case "lookAddons":
				return ec.fieldContext_Player_lookAddons(ctx, field)
			case "magLevel":
				return ec.fieldContext_Player_magLevel(ctx, field)
			case "mana":
				return ec.fieldContext_Player_mana(ctx, field)
			case "manaMax":
				return ec.fieldContext_Player_manaMax(ctx, field)
			case "soul":
				return ec.fieldContext_Player_soul(ctx, field)
			case "townId":
				return ec.fieldContext_Player_townId(ctx, field)
			case "town":
				return ec.fieldContext_Player_town(ctx, field)
			case "posX":
				return ec.fieldContext_Player_posX(ctx, field)
			case "posY":
				return ec.fieldContext_Player_posY(ctx, field)
			case "posZ":
				return ec.fieldContext_Player_posZ(ctx, field)
			case "cap":
				return ec.fieldContext_Player_cap(ctx, field)
			case "sex":
				return ec.fieldContext_Player_sex(ctx, field)
			case "lastLogin":
				return ec.fieldContext_Player_lastLogin(ctx, field)
			case "balance":
				return ec.fieldContext_Player_balance(ctx, field)
			case "deaths":
				return ec.fieldContext_Player_deaths(ctx, field)
			case "guild":
				return ec.fieldContext_Player_guild(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Player", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Account_bans(ctx context.Context, field graphql.CollectedField, obj *models.Account) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Account_bans,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Account().Bans(ctx, obj)
		},
		nil,
		ec.marshalNAccountBan2ᚕᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐAccountBanᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Account_bans(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "accountId":
				return ec.fieldContext_AccountBan_accountId(ctx, field)
			case "account":
				return ec.fieldContext_AccountBan_account(ctx, field)
			case "reason":
				return ec.fieldContext_AccountBan_reason(ctx, field)
			case "bannedAt":
				return ec.fieldContext_AccountBan_bannedAt(ctx, field)
			case "expiresAt":
				return ec.fieldContext_AccountBan_expiresAt(ctx, field)
			case "bannedBy":
				return ec.fieldContext_AccountBan_bannedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountBan", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Account_storage(ctx context.Context, field graphql.CollectedField, obj *models.Account) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Account_storage,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Account().Storage(ctx, obj)
		},
		nil,
		ec.marshalNAccountStorage2ᚕᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐAccountStorageᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Account_storage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "accountId":
				return ec.fieldContext_AccountStorage_accountId(ctx, field)
			case "key":
				return ec.fieldContext_AccountStorage_key(ctx, field)
			case "value":
				return ec.fieldContext_AccountStorage_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountStorage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Account_vipList(ctx context.Context, field graphql.CollectedField, obj *models.Account) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Account_vipList,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Account().VipList(ctx, obj)
		},
		nil,
		ec.marshalNVipEntry2ᚕᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐVipEntryᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Account_vipList(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "accountId":
				return ec.fieldContext_VipEntry_accountId(ctx, field)
			case "playerId":
				return ec.fieldContext_VipEntry_playerId(ctx, field)
			case "player":
				return ec.fieldContext_VipEntry_player(ctx, field)
			case "description":
				return ec.fieldContext_VipEntry_description(ctx, field)
			case "icon":
				return ec.fieldContext_VipEntry_icon(ctx, field)
			case "notify":
				return ec.fieldContext_VipEntry_notify(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VipEntry", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountBan_accountId(ctx context.Context, field graphql.CollectedField, obj *models.AccountBan) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_AccountBan_accountId,
		func(ctx context.Context) (any, error) {
			return obj.AccountID, nil
		},
		nil,
		ec.marshalNID2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_AccountBan_accountId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountBan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountBan_account(ctx context.Context, field graphql.CollectedField, obj *models.AccountBan) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_AccountBan_account,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.AccountBan().Account(ctx, obj)
		},
		nil,
		ec.marshalNAccount2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐAccount,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_AccountBan_account(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountBan",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Account_id(ctx, field)
			case "name":
				return ec.fieldContext_Account_name(ctx, field)
			case "email":
				return ec.fieldContext_Account_email(ctx, field)
			case "type":
				return ec.fieldContext_Account_type(ctx, field)
			case "premiumEndsAt":
				return ec.fieldContext_Account_premiumEndsAt(ctx, field)
			case "creation":
				return ec.fieldContext_Account_creation(ctx, field)
			case "players":
				return ec.fieldContext_Account_players(ctx, field)
			case "bans":
				return ec.fieldContext_Account_bans(ctx, field)
			case "storage":
				return ec.fieldContext_Account_storage(ctx, field)
			case "vipList":
				return ec.fieldContext_Account_vipList(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Account", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountBan_reason(ctx context.Context, field graphql.CollectedField, obj *models.AccountBan) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_AccountBan_reason,
		func(ctx context.Context) (any, error) {
			return obj.Reason, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_AccountBan_reason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountBan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountBan_bannedAt(ctx context.Context, field graphql.CollectedField, obj *models.AccountBan) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_AccountBan_bannedAt,
		func(ctx context.Context) (any, error) {
			return obj.BannedAt, nil
		},
		nil,
		ec.marshalNInt2int64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_AccountBan_bannedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountBan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountBan_expiresAt(ctx context.Context, field graphql.CollectedField, obj *models.AccountBan) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_AccountBan_expiresAt,
		func(ctx context.Context) (any, error) {
			return obj.ExpiresAt, nil
		},
		nil,
		ec.marshalNInt2int64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_AccountBan_expiresAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountBan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountBan_bannedBy(ctx context.Context, field graphql.CollectedField, obj *models.AccountBan) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_AccountBan_bannedBy,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.AccountBan().BannedBy(ctx, obj)
		},
		nil,
		ec.marshalNPlayer2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐPlayer,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_AccountBan_bannedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountBan",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Player_id(ctx, field)
			case "name":
				return ec.fieldContext_Player_name(ctx, field)
			case "accountId":
				return ec.fieldContext_Player_accountId(ctx, field)
			case "account":
				return ec.fieldContext_Player_account(ctx, field)
			case "level":
				return ec.fieldContext_Player_level(ctx, field)
			case "vocation":
				return ec.fieldContext_Player_vocation(ctx, field)
			case "health":
				return ec.fieldContext_Player_health(ctx, field)
			case "healthMax":
				return ec.fieldContext_Player_healthMax(ctx, field)
			case "experience":
				return ec.fieldContext_Player_experience(ctx, field)
			case "lookBody":
				return ec.fieldContext_Player_lookBody(ctx, field)
			case "lookFeet":
				return ec.fieldContext_Player_lookFeet(ctx, field)
			case "lookHead":
				return ec.fieldContext_Player_lookHead(ctx, field)
			case "lookLegs":
				return ec.fieldContext_Player_lookLegs(ctx, field)
			case "lookType":
				return ec.fieldContext_Player_lookType(ctx, field)
			case "lookAddons":
				return ec.fieldContext_Player_lookAddons(ctx, field)
			case "magLevel":
				return ec.fieldContext_Player_magLevel(ctx, field)
			case "mana":
				return ec.fieldContext_Player_mana(ctx, field)
			case "manaMax":
				return ec.fieldContext_Player_manaMax(ctx, field)
			case "soul":
				return ec.fieldContext_Player_soul(ctx, field)
			case "townId":
				return ec.fieldContext_Player_townId(ctx, field)
			case "town":
				return ec.fieldContext_Player_town(ctx, field)
			case "posX":
				return ec.fieldContext_Player_posX(ctx, field)
			case "posY":
				return ec.fieldContext_Player_posY(ctx, field)
			case "posZ":
				return ec.fieldContext_Player_posZ(ctx, field)
			case "cap":
				return ec.fieldContext_Player_cap(ctx, field)
			case "sex":
				return ec.fieldContext_Player_sex(ctx, field)
			case "lastLogin":
				return ec.fieldContext_Player_lastLogin(ctx, field)
			case "balance":
				return ec.fieldContext_Player_balance(ctx, field)
			case "deaths":
				return ec.fieldContext_Player_deaths(ctx, field)
			case "guild":
				return ec.fieldContext_Player_guild(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Player", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountStorage_accountId(ctx context.Context, field graphql.CollectedField, obj *models.AccountStorage) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_AccountStorage_accountId,
		func(ctx context.Context) (any, error) {
			return obj.AccountID, nil
		},
		nil,
		ec.marshalNID2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_AccountStorage_accountId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountStorage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountStorage_key(ctx context.Context, field graphql.CollectedField, obj *models.AccountStorage) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_AccountStorage_key,
		func(ctx context.Context) (any, error) {
			return obj.Key, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_AccountStorage_key(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountStorage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountStorage_value(ctx context.Context, field graphql.CollectedField, obj *models.AccountStorage) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_AccountStorage_value,
		func(ctx context.Context) (any, error) {
			return obj.Value, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_AccountStorage_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountStorage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Guild_id(ctx context.Context, field graphql.CollectedField, obj *models.Guild) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Guild_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Guild_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Guild",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Guild_name(ctx context.Context, field graphql.CollectedField, obj *models.Guild) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Guild_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Guild_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Guild",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Guild_ownerId(ctx context.Context, field graphql.CollectedField, obj *models.Guild) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Guild_ownerId,
		func(ctx context.Context) (any, error) {
			return obj.OwnerID, nil
		},
		nil,
		ec.marshalNID2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Guild_ownerId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Guild",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Guild_owner(ctx context.Context, field graphql.CollectedField, obj *models.Guild) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Guild_owner,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Guild().Owner(ctx, obj)
		},
		nil,
		ec.marshalNPlayer2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐPlayer,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Guild_owner(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Guild",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Player_id(ctx, field)
			case "name":
				return ec.fieldContext_Player_name(ctx, field)
			case "accountId":
				return ec.fieldContext_Player_accountId(ctx, field)
			case "account":
				return ec.fieldContext_Player_account(ctx, field)
			case "level":
				return ec.fieldContext_Player_level(ctx, field)
			case "vocation":
				return ec.fieldContext_Player_vocation(ctx, field)
			case "health":
				return ec.fieldContext_Player_health(ctx, field)
			case "healthMax":
				return ec.fieldContext_Player_healthMax(ctx, field)
			case "experience":
				return ec.fieldContext_Player_experience(ctx, field)
			case "lookBody":
				return ec.fieldContext_Player_lookBody(ctx, field)
			case "lookFeet":
				return ec.fieldContext_Player_lookFeet(ctx, field)
			case "lookHead":
				return ec.fieldContext_Player_lookHead(ctx, field)
			case "lookLegs":
				return ec.fieldContext_Player_lookLegs(ctx, field)
			case "lookType":
				return ec.fieldContext_Player_lookType(ctx, field)
			case "lookAddons":
				return ec.fieldContext_Player_lookAddons(ctx, field)
			case "magLevel":
				return ec.fieldContext_Player_magLevel(ctx, field)
			case "mana":
				return ec.fieldContext_Player_mana(ctx, field)
			case "manaMax":
				return ec.fieldContext_Player_manaMax(ctx, field)
			case "soul":
				return ec.fieldContext_Player_soul(ctx, field)
			case "townId":
				return ec.fieldContext_Player_townId(ctx, field)
			case "town":
				return ec.fieldContext_Player_town(ctx, field)
			case "posX":
				return ec.fieldContext_Player_posX(ctx, field)
			case "posY":
				return ec.fieldContext_Player_posY(ctx, field)
			case "posZ":
				return ec.fieldContext_Player_posZ(ctx, field)
			case "cap":
				return ec.fieldContext_Player_cap(ctx, field)
			case "sex":
				return ec.fieldContext_Player_sex(ctx, field)
			case "lastLogin":
				return ec.fieldContext_Player_lastLogin(ctx, field)
			case "balance":
				return ec.fieldContext_Player_balance(ctx, field)
			case "deaths":
				return ec.fieldContext_Player_deaths(ctx, field)
			case "guild":
				return ec.fieldContext_Player_guild(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Player", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Guild_creationData(ctx context.Context, field graphql.CollectedField, obj *models.Guild) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Guild_creationData,
		func(ctx context.Context) (any, error) {
			return obj.CreationData, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Guild_creationData(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Guild",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Guild_motd(ctx context.Context, field graphql.CollectedField, obj *models.Guild) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Guild_motd,
		func(ctx context.Context) (any, error) {
			return obj.MOTD, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Guild_motd(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Guild",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Guild_ranks(ctx context.Context, field graphql.CollectedField, obj *models.Guild) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Guild_ranks,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Guild().Ranks(ctx, obj)
		},
		nil,
		ec.marshalNGuildRank2ᚕᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐGuildRankᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Guild_ranks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Guild",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GuildRank_id(ctx, field)
			case "guildId":
				return ec.fieldContext_GuildRank_guildId(ctx, field)
			case "guild":
				return ec.fieldContext_GuildRank_guild(ctx, field)
			case "name":
				return ec.fieldContext_GuildRank_name(ctx, field)
			case "level":
				return ec.fieldContext_GuildRank_level(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GuildRank", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Guild_members(ctx context.Context, field graphql.CollectedField, obj *models.Guild) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Guild_members,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Guild().Members(ctx, obj)
		},
		nil,
		ec.marshalNGuildMembership2ᚕᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐGuildMembershipᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Guild_members(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Guild",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "playerId":
				return ec.fieldContext_GuildMembership_playerId(ctx, field)
			case "player":
				return ec.fieldContext_GuildMembership_player(ctx, field)
			case "guildId":
				return ec.fieldContext_GuildMembership_guildId(ctx, field)
			case "guild":
				return ec.fieldContext_GuildMembership_guild(ctx, field)
			case "rankId":
				return ec.fieldContext_GuildMembership_rankId(ctx, field)
			case "rank":
				return ec.fieldContext_GuildMembership_rank(ctx, field)
			case "nick":
				return ec.fieldContext_GuildMembership_nick(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GuildMembership", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GuildInvite_playerId(ctx context.Context, field graphql.CollectedField, obj *models.GuildInvite) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GuildInvite_playerId,
		func(ctx context.Context) (any, error) {
			return obj.PlayerID, nil
		},
		nil,
		ec.marshalNID2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GuildInvite_playerId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GuildInvite",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GuildInvite_guildId(ctx context.Context, field graphql.CollectedField, obj *models.GuildInvite) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GuildInvite_guildId,
		func(ctx context.Context) (any, error) {
			return obj.GuildID, nil
		},
		nil,
		ec.marshalNID2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GuildInvite_guildId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GuildInvite",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GuildInvite_player(ctx context.Context, field graphql.CollectedField, obj *models.GuildInvite) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GuildInvite_player,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.GuildInvite().Player(ctx, obj)
		},
		nil,
		ec.marshalNPlayer2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐPlayer,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GuildInvite_player(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GuildInvite",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Player_id(ctx, field)
			case "name":
				return ec.fieldContext_Player_name(ctx, field)
			case "accountId":
				return ec.fieldContext_Player_accountId(ctx, field)
			case "account":
				return ec.fieldContext_Player_account(ctx, field)
			case "level":
				return ec.fieldContext_Player_level(ctx, field)
			case "vocation":
				return ec.fieldContext_Player_vocation(ctx, field)
			case "health":
				return ec.fieldContext_Player_health(ctx, field)
			case "healthMax":
				return ec.fieldContext_Player_healthMax(ctx, field)
			case "experience":
				return ec.fieldContext_Player_experience(ctx, field)
			case "lookBody":
				return ec.fieldContext_Player_lookBody(ctx, field)
			case "lookFeet":
				return ec.fieldContext_Player_lookFeet(ctx, field)
			case "lookHead":
				return ec.fieldContext_Player_lookHead(ctx, field)
			case "lookLegs":
				return ec.fieldContext_Player_lookLegs(ctx, field)
			case "lookType":
				return ec.fieldContext_Player_lookType(ctx, field)
			case "lookAddons":
				return ec.fieldContext_Player_lookAddons(ctx, field)
			case "magLevel":
				return ec.fieldContext_Player_magLevel(ctx, field)
			case "mana":
				return ec.fieldContext_Player_mana(ctx, field)
			case "manaMax":
				return ec.fieldContext_Player_manaMax(ctx, field)
			case "soul":
				return ec.fieldContext_Player_soul(ctx, field)
			case "townId":
				return ec.fieldContext_Player_townId(ctx, field)
			case "town":
				return ec.fieldContext_Player_town(ctx, field)
			case "posX":
				return ec.fieldContext_Player_posX(ctx, field)
			case "posY":
				return ec.fieldContext_Player_posY(ctx, field)
			case "posZ":
				return ec.fieldContext_Player_posZ(ctx, field)
			case "cap":
				return ec.fieldContext_Player_cap(ctx, field)
			case "sex":
				return ec.fieldContext_Player_sex(ctx, field)
			case "lastLogin":
				return ec.fieldContext_Player_lastLogin(ctx, field)
			case "balance":
				return ec.fieldContext_Player_balance(ctx, field)
			case "deaths":
				return ec.fieldContext_Player_deaths(ctx, field)
			case "guild":
				return ec.fieldContext_Player_guild(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Player", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GuildInvite_guild(ctx context.Context, field graphql.CollectedField, obj *models.GuildInvite) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GuildInvite_guild,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.GuildInvite().Guild(ctx, obj)
		},
		nil,
		ec.marshalNGuild2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐGuild,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GuildInvite_guild(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GuildInvite",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Guild_id(ctx, field)
			case "name":
				return ec.fieldContext_Guild_name(ctx, field)
			case "ownerId":
				return ec.fieldContext_Guild_ownerId(ctx, field)
			case "owner":
				return ec.fieldContext_Guild_owner(ctx, field)
			case "creationData":
				return ec.fieldContext_Guild_creationData(ctx, field)
			case "motd":
				return ec.fieldContext_Guild_motd(ctx, field)
			case "ranks":
				return ec.fieldContext_Guild_ranks(ctx, field)
			case "members":
				return ec.fieldContext_Guild_members(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Guild", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GuildMembership_playerId(ctx context.Context, field graphql.CollectedField, obj *models.GuildMembership) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GuildMembership_playerId,
		func(ctx context.Context) (any, error) {
			return obj.PlayerID, nil
		},
		nil,
		ec.marshalNID2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GuildMembership_playerId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GuildMembership",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GuildMembership_player(ctx context.Context, field graphql.CollectedField, obj *models.GuildMembership) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GuildMembership_player,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.GuildMembership().Player(ctx, obj)
		},
		nil,
		ec.marshalNPlayer2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐPlayer,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GuildMembership_player(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GuildMembership",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Player_id(ctx, field)
			case "name":
				return ec.fieldContext_Player_name(ctx, field)
			case "accountId":
				return ec.fieldContext_Player_accountId(ctx, field)
			case "account":
				return ec.fieldContext_Player_account(ctx, field)
			case "level":
				return ec.fieldContext_Player_level(ctx, field)
			case "vocation":
				return ec.fieldContext_Player_vocation(ctx, field)
			case "health":
				return ec.fieldContext_Player_health(ctx, field)
			case "healthMax":
				return ec.fieldContext_Player_healthMax(ctx, field)
			case "experience":
				return ec.fieldContext_Player_experience(ctx, field)
			case "lookBody":
				return ec.fieldContext_Player_lookBody(ctx, field)
			case "lookFeet":
				return ec.fieldContext_Player_lookFeet(ctx, field)
			case "lookHead":
				return ec.fieldContext_Player_lookHead(ctx, field)
			case "lookLegs":
				return ec.fieldContext_Player_lookLegs(ctx, field)
			case "lookType":
				return ec.fieldContext_Player_lookType(ctx, field)
			case "lookAddons":
				return ec.fieldContext_Player_lookAddons(ctx, field)
			case "magLevel":
				return ec.fieldContext_Player_magLevel(ctx, field)
			case "mana":
				return ec.fieldContext_Player_mana(ctx, field)
			case "manaMax":
				return ec.fieldContext_Player_manaMax(ctx, field)
			case "soul":
				return ec.fieldContext_Player_soul(ctx, field)
			case "townId":
				return ec.fieldContext_Player_townId(ctx, field)
			case "town":
				return ec.fieldContext_Player_town(ctx, field)
			case "posX":
				return ec.fieldContext_Player_posX(ctx, field)
			case "posY":
				return ec.fieldContext_Player_posY(ctx, field)
			case "posZ":
				return ec.fieldContext_Player_posZ(ctx, field)
			case "cap":
				return ec.fieldContext_Player_cap(ctx, field)
			case "sex":
				return ec.fieldContext_Player_sex(ctx, field)
			case "lastLogin":
				return ec.fieldContext_Player_lastLogin(ctx, field)
			case "balance":
				return ec.fieldContext_Player_balance(ctx, field)
			case "deaths":
				return ec.fieldContext_Player_deaths(ctx, field)
			case "guild":
				return ec.fieldContext_Player_guild(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Player", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GuildMembership_guildId(ctx context.Context, field graphql.CollectedField, obj *models.GuildMembership) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GuildMembership_guildId,
		func(ctx context.Context) (any, error) {
			return obj.GuildID, nil
		},
		nil,
		ec.marshalNID2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GuildMembership_guildId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GuildMembership",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GuildMembership_guild(ctx context.Context, field graphql.CollectedField, obj *models.GuildMembership) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GuildMembership_guild,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.GuildMembership().Guild(ctx, obj)
		},
		nil,
		ec.marshalNGuild2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐGuild,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GuildMembership_guild(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GuildMembership",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Guild_id(ctx, field)
			case "name":
				return ec.fieldContext_Guild_name(ctx, field)
			case "ownerId":
				return ec.fieldContext_Guild_ownerId(ctx, field)
			case "owner":
				return ec.fieldContext_Guild_owner(ctx, field)
			case "creationData":
				return ec.fieldContext_Guild_creationData(ctx, field)
			case "motd":
				return ec.fieldContext_Guild_motd(ctx, field)
			case "ranks":
				return ec.fieldContext_Guild_ranks(ctx, field)
			case "members":
				return ec.fieldContext_Guild_members(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Guild", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GuildMembership_rankId(ctx context.Context, field graphql.CollectedField, obj *models.GuildMembership) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GuildMembership_rankId,
		func(ctx context.Context) (any, error) {
			return obj.RankID, nil
		},
		nil,
		ec.marshalNID2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GuildMembership_rankId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GuildMembership",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GuildMembership_rank(ctx context.Context, field graphql.CollectedField, obj *models.GuildMembership) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GuildMembership_rank,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.GuildMembership().Rank(ctx, obj)
		},
		nil,
		ec.marshalNGuildRank2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐGuildRank,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GuildMembership_rank(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GuildMembership",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GuildRank_id(ctx, field)
			case "guildId":
				return ec.fieldContext_GuildRank_guildId(ctx, field)
			case "guild":
				return ec.fieldContext_GuildRank_guild(ctx, field)
			case "name":
				return ec.fieldContext_GuildRank_name(ctx, field)
			case "level":
				return ec.fieldContext_GuildRank_level(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GuildRank", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GuildMembership_nick(ctx context.Context, field graphql.CollectedField, obj *models.GuildMembership) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GuildMembership_nick,
		func(ctx context.Context) (any, error) {
			return obj.Nick, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GuildMembership_nick(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GuildMembership",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GuildRank_id(ctx context.Context, field graphql.CollectedField, obj *models.GuildRank) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GuildRank_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GuildRank_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GuildRank",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GuildRank_guildId(ctx context.Context, field graphql.CollectedField, obj *models.GuildRank) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GuildRank_guildId,
		func(ctx context.Context) (any, error) {
			return obj.GuildID, nil
		},
		nil,
		ec.marshalNID2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GuildRank_guildId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GuildRank",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GuildRank_guild(ctx context.Context, field graphql.CollectedField, obj *models.GuildRank) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GuildRank_guild,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.GuildRank().Guild(ctx, obj)
		},
		nil,
		ec.marshalNGuild2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐGuild,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GuildRank_guild(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GuildRank",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Guild_id(ctx, field)
			case "name":
				return ec.fieldContext_Guild_name(ctx, field)
			case "ownerId":
				return ec.fieldContext_Guild_ownerId(ctx, field)
			case "owner":
				return ec.fieldContext_Guild_owner(ctx, field)
			case "creationData":
				return ec.fieldContext_Guild_creationData(ctx, field)
			case "motd":
				return ec.fieldContext_Guild_motd(ctx, field)
			case "ranks":
				return ec.fieldContext_Guild_ranks(ctx, field)
			case "members":
				return ec.fieldContext_Guild_members(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Guild", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GuildRank_name(ctx context.Context, field graphql.CollectedField, obj *models.GuildRank) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GuildRank_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GuildRank_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GuildRank",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GuildRank_level(ctx context.Context, field graphql.CollectedField, obj *models.GuildRank) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GuildRank_level,
		func(ctx context.Context) (any, error) {
			return obj.Level, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GuildRank_level(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GuildRank",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GuildWar_id(ctx context.Context, field graphql.CollectedField, obj *models.GuildWar) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GuildWar_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GuildWar_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GuildWar",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GuildWar_guild1(ctx context.Context, field graphql.CollectedField, obj *models.GuildWar) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GuildWar_guild1,
		func(ctx context.Context) (any, error) {
			return obj.Guild1, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GuildWar_guild1(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GuildWar",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GuildWar_guild2(ctx context.Context, field graphql.CollectedField, obj *models.GuildWar) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GuildWar_guild2,
		func(ctx context.Context) (any, error) {
			return obj.Guild2, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GuildWar_guild2(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GuildWar",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GuildWar_name1(ctx context.Context, field graphql.CollectedField, obj *models.GuildWar) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GuildWar_name1,
		func(ctx context.Context) (any, error) {
			return obj.Name1, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GuildWar_name1(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GuildWar",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GuildWar_name2(ctx context.Context, field graphql.CollectedField, obj *models.GuildWar) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GuildWar_name2,
		func(ctx context.Context) (any, error) {
			return obj.Name2, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GuildWar_name2(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GuildWar",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GuildWar_status(ctx context.Context, field graphql.CollectedField, obj *models.GuildWar) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GuildWar_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GuildWar_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GuildWar",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GuildWar_started(ctx context.Context, field graphql.CollectedField, obj *models.GuildWar) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GuildWar_started,
		func(ctx context.Context) (any, error) {
			return obj.Started, nil
		},
		nil,
		ec.marshalNInt2int64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GuildWar_started(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GuildWar",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GuildWar_ended(ctx context.Context, field graphql.CollectedField, obj *models.GuildWar) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GuildWar_ended,
		func(ctx context.Context) (any, error) {
			return obj.Ended, nil
		},
		nil,
		ec.marshalNInt2int64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GuildWar_ended(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GuildWar",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GuildWar_kills(ctx context.Context, field graphql.CollectedField, obj *models.GuildWar) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GuildWar_kills,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.GuildWar().Kills(ctx, obj)
		},
		nil,
		ec.marshalNGuildWarKill2ᚕᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐGuildWarKillᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GuildWar_kills(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GuildWar",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GuildWarKill_id(ctx, field)
			case "killer":
				return ec.fieldContext_GuildWarKill_killer(ctx, field)
			case "target":
				return ec.fieldContext_GuildWarKill_target(ctx, field)
			case "killerGuild":
				return ec.fieldContext_GuildWarKill_killerGuild(ctx, field)
			case "targetGuild":
				return ec.fieldContext_GuildWarKill_targetGuild(ctx, field)
			case "warId":
				return ec.fieldContext_GuildWarKill_warId(ctx, field)
			case "time":
				return ec.fieldContext_GuildWarKill_time(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GuildWarKill", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GuildWarKill_id(ctx context.Context, field graphql.CollectedField, obj *models.GuildWarKill) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GuildWarKill_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GuildWarKill_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GuildWarKill",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GuildWarKill_killer(ctx context.Context, field graphql.CollectedField, obj *models.GuildWarKill) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GuildWarKill_killer,
		func(ctx context.Context) (any, error) {
			return obj.Killer, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GuildWarKill_killer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GuildWarKill",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GuildWarKill_target(ctx context.Context, field graphql.CollectedField, obj *models.GuildWarKill) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GuildWarKill_target,
		func(ctx context.Context) (any, error) {
			return obj.Target, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GuildWarKill_target(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GuildWarKill",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GuildWarKill_killerGuild(ctx context.Context, field graphql.CollectedField, obj *models.GuildWarKill) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GuildWarKill_killerGuild,
		func(ctx context.Context) (any, error) {
			return obj.KillerGuild, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GuildWarKill_killerGuild(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GuildWarKill",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GuildWarKill_targetGuild(ctx context.Context, field graphql.CollectedField, obj *models.GuildWarKill) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GuildWarKill_targetGuild,
		func(ctx context.Context) (any, error) {
			return obj.TargetGuild, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GuildWarKill_targetGuild(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GuildWarKill",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GuildWarKill_warId(ctx context.Context, field graphql.CollectedField, obj *models.GuildWarKill) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GuildWarKill_warId,
		func(ctx context.Context) (any, error) {
			return obj.WarID, nil
		},
		nil,
		ec.marshalNID2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GuildWarKill_warId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GuildWarKill",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GuildWarKill_time(ctx context.Context, field graphql.CollectedField, obj *models.GuildWarKill) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GuildWarKill_time,
		func(ctx context.Context) (any, error) {
			return obj.Time, nil
		},
		nil,
		ec.marshalNInt2int64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GuildWarKill_time(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GuildWarKill",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _House_id(ctx context.Context, field graphql.CollectedField, obj *models.House) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_House_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_House_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "House",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _House_owner(ctx context.Context, field graphql.CollectedField, obj *models.House) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_House_owner,
		func(ctx context.Context) (any, error) {
			return obj.Owner, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_House_owner(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "House",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _House_paid(ctx context.Context, field graphql.CollectedField, obj *models.House) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_House_paid,
		func(ctx context.Context) (any, error) {
			return obj.Paid, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_House_paid(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "House",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _House_warnings(ctx context.Context, field graphql.CollectedField, obj *models.House) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_House_warnings,
		func(ctx context.Context) (any, error) {
			return obj.Warnings, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_House_warnings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "House",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _House_name(ctx context.Context, field graphql.CollectedField, obj *models.House) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_House_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_House_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "House",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _House_rent(ctx context.Context, field graphql.CollectedField, obj *models.House) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_House_rent,
		func(ctx context.Context) (any, error) {
			return obj.Rent, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_House_rent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "House",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _House_townId(ctx context.Context, field graphql.CollectedField, obj *models.House) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_House_townId,
		func(ctx context.Context) (any, error) {
			return obj.TownID, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_House_townId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "House",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _House_town(ctx context.Context, field graphql.CollectedField, obj *models.House) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_House_town,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.House().Town(ctx, obj)
		},
		nil,
		ec.marshalOTown2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐTown,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_House_town(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "House",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Town_id(ctx, field)
			case "name":
				return ec.fieldContext_Town_name(ctx, field)
			case "posX":
				return ec.fieldContext_Town_posX(ctx, field)
			case "posY":
				return ec.fieldContext_Town_posY(ctx, field)
			case "posZ":
				return ec.fieldContext_Town_posZ(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Town", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _House_bid(ctx context.Context, field graphql.CollectedField, obj *models.House) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_House_bid,
		func(ctx context.Context) (any, error) {
			return obj.Bid, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_House_bid(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "House",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _House_bidEnd(ctx context.Context, field graphql.CollectedField, obj *models.House) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_House_bidEnd,
		func(ctx context.Context) (any, error) {
			return obj.BidEnd, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_House_bidEnd(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "House",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _House_lastBid(ctx context.Context, field graphql.CollectedField, obj *models.House) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_House_lastBid,
		func(ctx context.Context) (any, error) {
			return obj.LastBid, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_House_lastBid(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "House",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _House_highestBidder(ctx context.Context, field graphql.CollectedField, obj *models.House) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_House_highestBidder,
		func(ctx context.Context) (any, error) {
			return obj.HighestBidder, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_House_highestBidder(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "House",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _House_size(ctx context.Context, field graphql.CollectedField, obj *models.House) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_House_size,
		func(ctx context.Context) (any, error) {
			return obj.Size, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_House_size(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "House",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _House_beds(ctx context.Context, field graphql.CollectedField, obj *models.House) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_House_beds,
		func(ctx context.Context) (any, error) {
			return obj.Beds, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_House_beds(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "House",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HouseList_houseId(ctx context.Context, field graphql.CollectedField, obj *models.HouseList) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_HouseList_houseId,
		func(ctx context.Context) (any, error) {
			return obj.HouseID, nil
		},
		nil,
		ec.marshalNID2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_HouseList_houseId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HouseList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HouseList_listId(ctx context.Context, field graphql.CollectedField, obj *models.HouseList) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_HouseList_listId,
		func(ctx context.Context) (any, error) {
			return obj.ListID, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_HouseList_listId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HouseList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HouseList_list(ctx context.Context, field graphql.CollectedField, obj *models.HouseList) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_HouseList_list,
		func(ctx context.Context) (any, error) {
			return obj.List, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_HouseList_list(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HouseList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MarketHistory_id(ctx context.Context, field graphql.CollectedField, obj *models.MarketHistory) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MarketHistory_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MarketHistory_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MarketHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MarketHistory_playerId(ctx context.Context, field graphql.CollectedField, obj *models.MarketHistory) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MarketHistory_playerId,
		func(ctx context.Context) (any, error) {
			return obj.PlayerID, nil
		},
		nil,
		ec.marshalNID2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MarketHistory_playerId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MarketHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MarketHistory_player(ctx context.Context, field graphql.CollectedField, obj *models.MarketHistory) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MarketHistory_player,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.MarketHistory().Player(ctx, obj)
		},
		nil,
		ec.marshalNPlayer2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐPlayer,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MarketHistory_player(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MarketHistory",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Player_id(ctx, field)
			case "name":
				return ec.fieldContext_Player_name(ctx, field)
			case "accountId":
				return ec.fieldContext_Player_accountId(ctx, field)
			case "account":
				return ec.fieldContext_Player_account(ctx, field)
			case "level":
				return ec.fieldContext_Player_level(ctx, field)
			case "vocation":
				return ec.fieldContext_Player_vocation(ctx, field)
			case "health":
				return ec.fieldContext_Player_health(ctx, field)
			case "healthMax":
				return ec.fieldContext_Player_healthMax(ctx, field)
			case "experience":
				return ec.fieldContext_Player_experience(ctx, field)
			case "lookBody":
				return ec.fieldContext_Player_lookBody(ctx, field)
			case "lookFeet":
				return ec.fieldContext_Player_lookFeet(ctx, field)
			case "lookHead":
				return ec.fieldContext_Player_lookHead(ctx, field)
			case "lookLegs":
				return ec.fieldContext_Player_lookLegs(ctx, field)
			case "lookType":
				return ec.fieldContext_Player_lookType(ctx, field)
			case "lookAddons":
				return ec.fieldContext_Player_lookAddons(ctx, field)
			case "magLevel":
				return ec.fieldContext_Player_magLevel(ctx, field)
			case "mana":
				return ec.fieldContext_Player_mana(ctx, field)
			case "manaMax":
				return ec.fieldContext_Player_manaMax(ctx, field)
			case "soul":
				return ec.fieldContext_Player_soul(ctx, field)
			case "townId":
				return ec.fieldContext_Player_townId(ctx, field)
			case "town":
				return ec.fieldContext_Player_town(ctx, field)
			case "posX":
				return ec.fieldContext_Player_posX(ctx, field)
			case "posY":
				return ec.fieldContext_Player_posY(ctx, field)
			case "posZ":
				return ec.fieldContext_Player_posZ(ctx, field)
			case "cap":
				return ec.fieldContext_Player_cap(ctx, field)
			case "sex":
				return ec.fieldContext_Player_sex(ctx, field)
			case "lastLogin":
				return ec.fieldContext_Player_lastLogin(ctx, field)
			case "balance":
				return ec.fieldContext_Player_balance(ctx, field)
			case "deaths":
				return ec.fieldContext_Player_deaths(ctx, field)
			case "guild":
				return ec.fieldContext_Player_guild(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Player", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MarketHistory_sale(ctx context.Context, field graphql.CollectedField, obj *models.MarketHistory) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MarketHistory_sale,
		func(ctx context.Context) (any, error) {
			return obj.Sale, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MarketHistory_sale(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MarketHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MarketHistory_itemType(ctx context.Context, field graphql.CollectedField, obj *models.MarketHistory) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MarketHistory_itemType,
		func(ctx context.Context) (any, error) {
			return obj.ItemType, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MarketHistory_itemType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MarketHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MarketHistory_amount(ctx context.Context, field graphql.CollectedField, obj *models.MarketHistory) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MarketHistory_amount,
		func(ctx context.Context) (any, error) {
			return obj.Amount, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MarketHistory_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MarketHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MarketHistory_price(ctx context.Context, field graphql.CollectedField, obj *models.MarketHistory) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MarketHistory_price,
		func(ctx context.Context) (any, error) {
			return obj.Price, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MarketHistory_price(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MarketHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MarketHistory_expiresAt(ctx context.Context, field graphql.CollectedField, obj *models.MarketHistory) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MarketHistory_expiresAt,
		func(ctx context.Context) (any, error) {
			return obj.ExpiresAt, nil
		},
		nil,
		ec.marshalNInt2int64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MarketHistory_expiresAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MarketHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MarketHistory_inserted(ctx context.Context, field graphql.CollectedField, obj *models.MarketHistory) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MarketHistory_inserted,
		func(ctx context.Context) (any, error) {
			return obj.Inserted, nil
		},
		nil,
		ec.marshalNInt2int64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MarketHistory_inserted(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MarketHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MarketHistory_state(ctx context.Context, field graphql.CollectedField, obj *models.MarketHistory) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MarketHistory_state,
		func(ctx context.Context) (any, error) {
			return obj.State, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MarketHistory_state(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MarketHistory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MarketOffer_id(ctx context.Context, field graphql.CollectedField, obj *models.MarketOffer) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MarketOffer_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MarketOffer_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MarketOffer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MarketOffer_playerId(ctx context.Context, field graphql.CollectedField, obj *models.MarketOffer) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MarketOffer_playerId,
		func(ctx context.Context) (any, error) {
			return obj.PlayerID, nil
		},
		nil,
		ec.marshalNID2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MarketOffer_playerId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MarketOffer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MarketOffer_player(ctx context.Context, field graphql.CollectedField, obj *models.MarketOffer) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MarketOffer_player,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.MarketOffer().Player(ctx, obj)
		},
		nil,
		ec.marshalNPlayer2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐPlayer,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MarketOffer_player(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MarketOffer",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Player_id(ctx, field)
			case "name":
				return ec.fieldContext_Player_name(ctx, field)
			case "accountId":
				return ec.fieldContext_Player_accountId(ctx, field)
			case "account":
				return ec.fieldContext_Player_account(ctx, field)
			case "level":
				return ec.fieldContext_Player_level(ctx, field)
			case "vocation":
				return ec.fieldContext_Player_vocation(ctx, field)
			case "health":
				return ec.fieldContext_Player_health(ctx, field)
			case "healthMax":
				return ec.fieldContext_Player_healthMax(ctx, field)
			case "experience":
				return ec.fieldContext_Player_experience(ctx, field)
			case "lookBody":
				return ec.fieldContext_Player_lookBody(ctx, field)
			case "lookFeet":
				return ec.fieldContext_Player_lookFeet(ctx, field)
			case "lookHead":
				return ec.fieldContext_Player_lookHead(ctx, field)
			case "lookLegs":
				return ec.fieldContext_Player_lookLegs(ctx, field)
			case "lookType":
				return ec.fieldContext_Player_lookType(ctx, field)
			case "lookAddons":
				return ec.fieldContext_Player_lookAddons(ctx, field)
			case "magLevel":
				return ec.fieldContext_Player_magLevel(ctx, field)
			case "mana":
				return ec.fieldContext_Player_mana(ctx, field)
			case "manaMax":
				return ec.fieldContext_Player_manaMax(ctx, field)
			case "soul":
				return ec.fieldContext_Player_soul(ctx, field)
			case "townId":
				return ec.fieldContext_Player_townId(ctx, field)
			case "town":
				return ec.fieldContext_Player_town(ctx, field)
			case "posX":
				return ec.fieldContext_Player_posX(ctx, field)
			case "posY":
				return ec.fieldContext_Player_posY(ctx, field)
			case "posZ":
				return ec.fieldContext_Player_posZ(ctx, field)
			case "cap":
				return ec.fieldContext_Player_cap(ctx, field)
			case "sex":
				return ec.fieldContext_Player_sex(ctx, field)
			case "lastLogin":
				return ec.fieldContext_Player_lastLogin(ctx, field)
			case "balance":
				return ec.fieldContext_Player_balance(ctx, field)
			case "deaths":
				return ec.fieldContext_Player_deaths(ctx, field)
			case "guild":
				return ec.fieldContext_Player_guild(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Player", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MarketOffer_sale(ctx context.Context, field graphql.CollectedField, obj *models.MarketOffer) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MarketOffer_sale,
		func(ctx context.Context) (any, error) {
			return obj.Sale, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MarketOffer_sale(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MarketOffer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MarketOffer_itemType(ctx context.Context, field graphql.CollectedField, obj *models.MarketOffer) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MarketOffer_itemType,
		func(ctx context.Context) (any, error) {
			return obj.ItemType, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MarketOffer_itemType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MarketOffer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MarketOffer_amount(ctx context.Context, field graphql.CollectedField, obj *models.MarketOffer) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MarketOffer_amount,
		func(ctx context.Context) (any, error) {
			return obj.Amount, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MarketOffer_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MarketOffer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MarketOffer_created(ctx context.Context, field graphql.CollectedField, obj *models.MarketOffer) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MarketOffer_created,
		func(ctx context.Context) (any, error) {
			return obj.Created, nil
		},
		nil,
		ec.marshalNInt2int64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MarketOffer_created(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MarketOffer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MarketOffer_anonymous(ctx context.Context, field graphql.CollectedField, obj *models.MarketOffer) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MarketOffer_anonymous,
		func(ctx context.Context) (any, error) {
			return obj.Anonymous, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MarketOffer_anonymous(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MarketOffer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MarketOffer_price(ctx context.Context, field graphql.CollectedField, obj *models.MarketOffer) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MarketOffer_price,
		func(ctx context.Context) (any, error) {
			return obj.Price, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MarketOffer_price(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MarketOffer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createAccount,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreateAccount(ctx, fc.Args["input"].(models.CreateAccountInput))
		},
		nil,
		ec.marshalNAccount2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐAccount,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_createAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Account_id(ctx, field)
			case "name":
				return ec.fieldContext_Account_name(ctx, field)
			case "email":
				return ec.fieldContext_Account_email(ctx, field)
			case "type":
				return ec.fieldContext_Account_type(ctx, field)
			case "premiumEndsAt":
				return ec.fieldContext_Account_premiumEndsAt(ctx, field)
			case "creation":
				return ec.fieldContext_Account_creation(ctx, field)
			case "players":
				return ec.fieldContext_Account_players(ctx, field)
			case "bans":
				return ec.fieldContext_Account_bans(ctx, field)
			case "storage":
				return ec.fieldContext_Account_storage(ctx, field)
			case "vipList":
				return ec.fieldContext_Account_vipList(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Account", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createAccount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_banAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_banAccount,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().BanAccount(ctx, fc.Args["input"].(models.BanAccountInput))
		},
		nil,
		ec.marshalNAccountBan2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐAccountBan,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_banAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "accountId":
				return ec.fieldContext_AccountBan_accountId(ctx, field)
			case "account":
				return ec.fieldContext_AccountBan_account(ctx, field)
			case "reason":
				return ec.fieldContext_AccountBan_reason(ctx, field)
			case "bannedAt":
				return ec.fieldContext_AccountBan_bannedAt(ctx, field)
			case "expiresAt":
				return ec.fieldContext_AccountBan_expiresAt(ctx, field)
			case "bannedBy":
				return ec.fieldContext_AccountBan_bannedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountBan", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_banAccount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createPlayer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createPlayer,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreatePlayer(ctx, fc.Args["input"].(models.CreatePlayerInput))
		},
		nil,
		ec.marshalNPlayer2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐPlayer,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_createPlayer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Player_id(ctx, field)
			case "name":
				return ec.fieldContext_Player_name(ctx, field)
			case "accountId":
				return ec.fieldContext_Player_accountId(ctx, field)
			case "account":
				return ec.fieldContext_Player_account(ctx, field)
			case "level":
				return ec.fieldContext_Player_level(ctx, field)
			case "vocation":
				return ec.fieldContext_Player_vocation(ctx, field)
			case "health":
				return ec.fieldContext_Player_health(ctx, field)
			case "healthMax":
				return ec.fieldContext_Player_healthMax(ctx, field)
			case "experience":
				return ec.fieldContext_Player_experience(ctx, field)
			case "lookBody":
				return ec.fieldContext_Player_lookBody(ctx, field)
			case "lookFeet":
				return ec.fieldContext_Player_lookFeet(ctx, field)
			case "lookHead":
				return ec.fieldContext_Player_lookHead(ctx, field)
			case "lookLegs":
				return ec.fieldContext_Player_lookLegs(ctx, field)
			case "lookType":
				return ec.fieldContext_Player_lookType(ctx, field)
			case "lookAddons":
				return ec.fieldContext_Player_lookAddons(ctx, field)
			case "magLevel":
				return ec.fieldContext_Player_magLevel(ctx, field)
			case "mana":
				return ec.fieldContext_Player_mana(ctx, field)
			case "manaMax":
				return ec.fieldContext_Player_manaMax(ctx, field)
			case "soul":
				return ec.fieldContext_Player_soul(ctx, field)
			case "townId":
				return ec.fieldContext_Player_townId(ctx, field)
			case "town":
				return ec.fieldContext_Player_town(ctx, field)
			case "posX":
				return ec.fieldContext_Player_posX(ctx, field)
			case "posY":
				return ec.fieldContext_Player_posY(ctx, field)
			case "posZ":
				return ec.fieldContext_Player_posZ(ctx, field)
			case "cap":
				return ec.fieldContext_Player_cap(ctx, field)
			case "sex":
				return ec.fieldContext_Player_sex(ctx, field)
			case "lastLogin":
				return ec.fieldContext_Player_lastLogin(ctx, field)
			case "balance":
				return ec.fieldContext_Player_balance(ctx, field)
			case "deaths":
				return ec.fieldContext_Player_deaths(ctx, field)
			case "guild":
				return ec.fieldContext_Player_guild(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Player", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createPlayer_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createTown(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createTown,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreateTown(ctx, fc.Args["input"].(models.CreateTownInput))
		},
		nil,
		ec.marshalNTown2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐTown,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_createTown(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Town_id(ctx, field)
			case "name":
				return ec.fieldContext_Town_name(ctx, field)
			case "posX":
				return ec.fieldContext_Town_posX(ctx, field)
			case "posY":
				return ec.fieldContext_Town_posY(ctx, field)
			case "posZ":
				return ec.fieldContext_Town_posZ(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Town", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createTown_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createGuild(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createGuild,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreateGuild(ctx, fc.Args["input"].(models.CreateGuildInput))
		},
		nil,
		ec.marshalNGuild2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐGuild,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_createGuild(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Guild_id(ctx, field)
			case "name":
				return ec.fieldContext_Guild_name(ctx, field)
			case "ownerId":
				return ec.fieldContext_Guild_ownerId(ctx, field)
			case "owner":
				return ec.fieldContext_Guild_owner(ctx, field)
			case "creationData":
				return ec.fieldContext_Guild_creationData(ctx, field)
			case "motd":
				return ec.fieldContext_Guild_motd(ctx, field)
			case "ranks":
				return ec.fieldContext_Guild_ranks(ctx, field)
			case "members":
				return ec.fieldContext_Guild_members(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Guild", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createGuild_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_inviteToGuild(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_inviteToGuild,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().InviteToGuild(ctx, fc.Args["guildId"].(string), fc.Args["playerId"].(string))
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_inviteToGuild(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_inviteToGuild_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_acceptGuildInvite(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_acceptGuildInvite,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().AcceptGuildInvite(ctx, fc.Args["guildId"].(string), fc.Args["playerId"].(string))
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_acceptGuildInvite(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_acceptGuildInvite_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_bidHouse(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_bidHouse,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().BidHouse(ctx, fc.Args["houseId"].(string), fc.Args["playerId"].(string), fc.Args["bidAmount"].(int))
		},
		nil,
		ec.marshalNHouse2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐHouse,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_bidHouse(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_House_id(ctx, field)
			case "owner":
				return ec.fieldContext_House_owner(ctx, field)
			case "paid":
				return ec.fieldContext_House_paid(ctx, field)
			case "warnings":
				return ec.fieldContext_House_warnings(ctx, field)
			case "name":
				return ec.fieldContext_House_name(ctx, field)
			case "rent":
				return ec.fieldContext_House_rent(ctx, field)
			case "townId":
				return ec.fieldContext_House_townId(ctx, field)
			case "town":
				return ec.fieldContext_House_town(ctx, field)
			case "bid":
				return ec.fieldContext_House_bid(ctx, field)
			case "bidEnd":
				return ec.fieldContext_House_bidEnd(ctx, field)
			case "lastBid":
				return ec.fieldContext_House_lastBid(ctx, field)
			case "highestBidder":
				return ec.fieldContext_House_highestBidder(ctx, field)
			case "size":
				return ec.fieldContext_House_size(ctx, field)
			case "beds":
				return ec.fieldContext_House_beds(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type House", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_bidHouse_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createMarketOffer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createMarketOffer,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreateMarketOffer(ctx, fc.Args["input"].(models.CreateMarketOfferInput))
		},
		nil,
		ec.marshalNMarketOffer2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐMarketOffer,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_createMarketOffer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MarketOffer_id(ctx, field)
			case "playerId":
				return ec.fieldContext_MarketOffer_playerId(ctx, field)
			case "player":
				return ec.fieldContext_MarketOffer_player(ctx, field)
			case "sale":
				return ec.fieldContext_MarketOffer_sale(ctx, field)
			case "itemType":
				return ec.fieldContext_MarketOffer_itemType(ctx, field)
			case "amount":
				return ec.fieldContext_MarketOffer_amount(ctx, field)
			case "created":
				return ec.fieldContext_MarketOffer_created(ctx, field)
			case "anonymous":
				return ec.fieldContext_MarketOffer_anonymous(ctx, field)
			case "price":
				return ec.fieldContext_MarketOffer_price(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MarketOffer", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createMarketOffer_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Player_id(ctx context.Context, field graphql.CollectedField, obj *models.Player) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Player_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Player_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_name(ctx context.Context, field graphql.CollectedField, obj *models.Player) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Player_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Player_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_accountId(ctx context.Context, field graphql.CollectedField, obj *models.Player) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Player_accountId,
		func(ctx context.Context) (any, error) {
			return obj.AccountID, nil
		},
		nil,
		ec.marshalNID2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Player_accountId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_account(ctx context.Context, field graphql.CollectedField, obj *models.Player) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Player_account,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Player().Account(ctx, obj)
		},
		nil,
		ec.marshalNAccount2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐAccount,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Player_account(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Account_id(ctx, field)
			case "name":
				return ec.fieldContext_Account_name(ctx, field)
			case "email":
				return ec.fieldContext_Account_email(ctx, field)
			case "type":
				return ec.fieldContext_Account_type(ctx, field)
			case "premiumEndsAt":
				return ec.fieldContext_Account_premiumEndsAt(ctx, field)
			case "creation":
				return ec.fieldContext_Account_creation(ctx, field)
			case "players":
				return ec.fieldContext_Account_players(ctx, field)
			case "bans":
				return ec.fieldContext_Account_bans(ctx, field)
			case "storage":
				return ec.fieldContext_Account_storage(ctx, field)
			case "vipList":
				return ec.fieldContext_Account_vipList(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Account", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_level(ctx context.Context, field graphql.CollectedField, obj *models.Player) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Player_level,
		func(ctx context.Context) (any, error) {
			return obj.Level, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Player_level(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_vocation(ctx context.Context, field graphql.CollectedField, obj *models.Player) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Player_vocation,
		func(ctx context.Context) (any, error) {
			return obj.Vocation, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Player_vocation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_health(ctx context.Context, field graphql.CollectedField, obj *models.Player) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Player_health,
		func(ctx context.Context) (any, error) {
			return obj.Health, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Player_health(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_healthMax(ctx context.Context, field graphql.CollectedField, obj *models.Player) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Player_healthMax,
		func(ctx context.Context) (any, error) {
			return obj.HealthMax, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Player_healthMax(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_experience(ctx context.Context, field graphql.CollectedField, obj *models.Player) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Player_experience,
		func(ctx context.Context) (any, error) {
			return obj.Experience, nil
		},
		nil,
		ec.marshalNInt2int64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Player_experience(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_lookBody(ctx context.Context, field graphql.CollectedField, obj *models.Player) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Player_lookBody,
		func(ctx context.Context) (any, error) {
			return obj.LookBody, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Player_lookBody(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_lookFeet(ctx context.Context, field graphql.CollectedField, obj *models.Player) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Player_lookFeet,
		func(ctx context.Context) (any, error) {
			return obj.LookFeet, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Player_lookFeet(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_lookHead(ctx context.Context, field graphql.CollectedField, obj *models.Player) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Player_lookHead,
		func(ctx context.Context) (any, error) {
			return obj.LookHead, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Player_lookHead(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_lookLegs(ctx context.Context, field graphql.CollectedField, obj *models.Player) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Player_lookLegs,
		func(ctx context.Context) (any, error) {
			return obj.LookLegs, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Player_lookLegs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_lookType(ctx context.Context, field graphql.CollectedField, obj *models.Player) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Player_lookType,
		func(ctx context.Context) (any, error) {
			return obj.LookType, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Player_lookType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_lookAddons(ctx context.Context, field graphql.CollectedField, obj *models.Player) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Player_lookAddons,
		func(ctx context.Context) (any, error) {
			return obj.LookAddons, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Player_lookAddons(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_magLevel(ctx context.Context, field graphql.CollectedField, obj *models.Player) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Player_magLevel,
		func(ctx context.Context) (any, error) {
			return obj.MagLevel, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Player_magLevel(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_mana(ctx context.Context, field graphql.CollectedField, obj *models.Player) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Player_mana,
		func(ctx context.Context) (any, error) {
			return obj.Mana, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Player_mana(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_manaMax(ctx context.Context, field graphql.CollectedField, obj *models.Player) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Player_manaMax,
		func(ctx context.Context) (any, error) {
			return obj.ManaMax, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Player_manaMax(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_soul(ctx context.Context, field graphql.CollectedField, obj *models.Player) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Player_soul,
		func(ctx context.Context) (any, error) {
			return obj.Soul, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Player_soul(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_townId(ctx context.Context, field graphql.CollectedField, obj *models.Player) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Player_townId,
		func(ctx context.Context) (any, error) {
			return obj.TownID, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Player_townId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_town(ctx context.Context, field graphql.CollectedField, obj *models.Player) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Player_town,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Player().Town(ctx, obj)
		},
		nil,
		ec.marshalOTown2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐTown,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Player_town(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Town_id(ctx, field)
			case "name":
				return ec.fieldContext_Town_name(ctx, field)
			case "posX":
				return ec.fieldContext_Town_posX(ctx, field)
			case "posY":
				return ec.fieldContext_Town_posY(ctx, field)
			case "posZ":
				return ec.fieldContext_Town_posZ(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Town", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_posX(ctx context.Context, field graphql.CollectedField, obj *models.Player) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Player_posX,
		func(ctx context.Context) (any, error) {
			return obj.PosX, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Player_posX(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_posY(ctx context.Context, field graphql.CollectedField, obj *models.Player) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Player_posY,
		func(ctx context.Context) (any, error) {
			return obj.PosY, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Player_posY(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_posZ(ctx context.Context, field graphql.CollectedField, obj *models.Player) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Player_posZ,
		func(ctx context.Context) (any, error) {
			return obj.PosZ, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Player_posZ(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_cap(ctx context.Context, field graphql.CollectedField, obj *models.Player) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Player_cap,
		func(ctx context.Context) (any, error) {
			return obj.Cap, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Player_cap(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_sex(ctx context.Context, field graphql.CollectedField, obj *models.Player) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Player_sex,
		func(ctx context.Context) (any, error) {
			return obj.Sex, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Player_sex(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_lastLogin(ctx context.Context, field graphql.CollectedField, obj *models.Player) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Player_lastLogin,
		func(ctx context.Context) (any, error) {
			return obj.LastLogin, nil
		},
		nil,
		ec.marshalNInt2int64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Player_lastLogin(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_balance(ctx context.Context, field graphql.CollectedField, obj *models.Player) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Player_balance,
		func(ctx context.Context) (any, error) {
			return obj.Balance, nil
		},
		nil,
		ec.marshalNInt2int64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Player_balance(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_deaths(ctx context.Context, field graphql.CollectedField, obj *models.Player) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Player_deaths,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Player().Deaths(ctx, obj)
		},
		nil,
		ec.marshalNPlayerDeath2ᚕᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐPlayerDeathᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Player_deaths(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "playerId":
				return ec.fieldContext_PlayerDeath_playerId(ctx, field)
			case "time":
				return ec.fieldContext_PlayerDeath_time(ctx, field)
			case "level":
				return ec.fieldContext_PlayerDeath_level(ctx, field)
			case "killedBy":
				return ec.fieldContext_PlayerDeath_killedBy(ctx, field)
			case "isPlayer":
				return ec.fieldContext_PlayerDeath_isPlayer(ctx, field)
			case "mostDamageBy":
				return ec.fieldContext_PlayerDeath_mostDamageBy(ctx, field)
			case "mostDamageIsPlayer":
				return ec.fieldContext_PlayerDeath_mostDamageIsPlayer(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlayerDeath", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_guild(ctx context.Context, field graphql.CollectedField, obj *models.Player) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Player_guild,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Player().Guild(ctx, obj)
		},
		nil,
		ec.marshalOGuildMembership2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐGuildMembership,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Player_guild(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "playerId":
				return ec.fieldContext_GuildMembership_playerId(ctx, field)
			case "player":
				return ec.fieldContext_GuildMembership_player(ctx, field)
			case "guildId":
				return ec.fieldContext_GuildMembership_guildId(ctx, field)
			case "guild":
				return ec.fieldContext_GuildMembership_guild(ctx, field)
			case "rankId":
				return ec.fieldContext_GuildMembership_rankId(ctx, field)
			case "rank":
				return ec.fieldContext_GuildMembership_rank(ctx, field)
			case "nick":
				return ec.fieldContext_GuildMembership_nick(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GuildMembership", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlayerDeath_playerId(ctx context.Context, field graphql.CollectedField, obj *models.PlayerDeath) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PlayerDeath_playerId,
		func(ctx context.Context) (any, error) {
			return obj.PlayerID, nil
		},
		nil,
		ec.marshalNID2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PlayerDeath_playerId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlayerDeath",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlayerDeath_time(ctx context.Context, field graphql.CollectedField, obj *models.PlayerDeath) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PlayerDeath_time,
		func(ctx context.Context) (any, error) {
			return obj.Time, nil
		},
		nil,
		ec.marshalNInt2int64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PlayerDeath_time(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlayerDeath",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlayerDeath_level(ctx context.Context, field graphql.CollectedField, obj *models.PlayerDeath) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PlayerDeath_level,
		func(ctx context.Context) (any, error) {
			return obj.Level, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PlayerDeath_level(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlayerDeath",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlayerDeath_killedBy(ctx context.Context, field graphql.CollectedField, obj *models.PlayerDeath) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PlayerDeath_killedBy,
		func(ctx context.Context) (any, error) {
			return obj.KilledBy, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PlayerDeath_killedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlayerDeath",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlayerDeath_isPlayer(ctx context.Context, field graphql.CollectedField, obj *models.PlayerDeath) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PlayerDeath_isPlayer,
		func(ctx context.Context) (any, error) {
			return obj.IsPlayer, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PlayerDeath_isPlayer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlayerDeath",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlayerDeath_mostDamageBy(ctx context.Context, field graphql.CollectedField, obj *models.PlayerDeath) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PlayerDeath_mostDamageBy,
		func(ctx context.Context) (any, error) {
			return obj.MostDamageBy, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PlayerDeath_mostDamageBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlayerDeath",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlayerDeath_mostDamageIsPlayer(ctx context.Context, field graphql.CollectedField, obj *models.PlayerDeath) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PlayerDeath_mostDamageIsPlayer,
		func(ctx context.Context) (any, error) {
			return obj.MostDamageIsPlayer, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PlayerDeath_mostDamageIsPlayer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlayerDeath",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlayerStorage_playerId(ctx context.Context, field graphql.CollectedField, obj *models.PlayerStorage) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PlayerStorage_playerId,
		func(ctx context.Context) (any, error) {
			return obj.PlayerID, nil
		},
		nil,
		ec.marshalNID2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PlayerStorage_playerId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlayerStorage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlayerStorage_key(ctx context.Context, field graphql.CollectedField, obj *models.PlayerStorage) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PlayerStorage_key,
		func(ctx context.Context) (any, error) {
			return obj.Key, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PlayerStorage_key(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlayerStorage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlayerStorage_value(ctx context.Context, field graphql.CollectedField, obj *models.PlayerStorage) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PlayerStorage_value,
		func(ctx context.Context) (any, error) {
			return obj.Value, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PlayerStorage_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlayerStorage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_account(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_account,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Account(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalOAccount2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐAccount,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_account(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Account_id(ctx, field)
			case "name":
				return ec.fieldContext_Account_name(ctx, field)
			case "email":
				return ec.fieldContext_Account_email(ctx, field)
			case "type":
				return ec.fieldContext_Account_type(ctx, field)
			case "premiumEndsAt":
				return ec.fieldContext_Account_premiumEndsAt(ctx, field)
			case "creation":
				return ec.fieldContext_Account_creation(ctx, field)
			case "players":
				return ec.fieldContext_Account_players(ctx, field)
			case "bans":
				return ec.fieldContext_Account_bans(ctx, field)
			case "storage":
				return ec.fieldContext_Account_storage(ctx, field)
			case "vipList":
				return ec.fieldContext_Account_vipList(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Account", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_account_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_accounts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_accounts,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Accounts(ctx, fc.Args["limit"].(*int))
		},
		nil,
		ec.marshalNAccount2ᚕᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐAccountᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_accounts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Account_id(ctx, field)
			case "name":
				return ec.fieldContext_Account_name(ctx, field)
			case "email":
				return ec.fieldContext_Account_email(ctx, field)
			case "type":
				return ec.fieldContext_Account_type(ctx, field)
			case "premiumEndsAt":
				return ec.fieldContext_Account_premiumEndsAt(ctx, field)
			case "creation":
				return ec.fieldContext_Account_creation(ctx, field)
			case "players":
				return ec.fieldContext_Account_players(ctx, field)
			case "bans":
				return ec.fieldContext_Account_bans(ctx, field)
			case "storage":
				return ec.fieldContext_Account_storage(ctx, field)
			case "vipList":
				return ec.fieldContext_Account_vipList(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Account", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_accounts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_player(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_player,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Player(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalOPlayer2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐPlayer,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_player(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Player_id(ctx, field)
			case "name":
				return ec.fieldContext_Player_name(ctx, field)
			case "accountId":
				return ec.fieldContext_Player_accountId(ctx, field)
			case "account":
				return ec.fieldContext_Player_account(ctx, field)
			case "level":
				return ec.fieldContext_Player_level(ctx, field)
			case "vocation":
				return ec.fieldContext_Player_vocation(ctx, field)
			case "health":
				return ec.fieldContext_Player_health(ctx, field)
			case "healthMax":
				return ec.fieldContext_Player_healthMax(ctx, field)
			case "experience":
				return ec.fieldContext_Player_experience(ctx, field)
			case "lookBody":
				return ec.fieldContext_Player_lookBody(ctx, field)
			case "lookFeet":
				return ec.fieldContext_Player_lookFeet(ctx, field)
			case "lookHead":
				return ec.fieldContext_Player_lookHead(ctx, field)
			case "lookLegs":
				return ec.fieldContext_Player_lookLegs(ctx, field)
			case "lookType":
				return ec.fieldContext_Player_lookType(ctx, field)
			case "lookAddons":
				return ec.fieldContext_Player_lookAddons(ctx, field)
			case "magLevel":
				return ec.fieldContext_Player_magLevel(ctx, field)
			case "mana":
				return ec.fieldContext_Player_mana(ctx, field)
			case "manaMax":
				return ec.fieldContext_Player_manaMax(ctx, field)
			case "soul":
				return ec.fieldContext_Player_soul(ctx, field)
			case "townId":
				return ec.fieldContext_Player_townId(ctx, field)
			case "town":
				return ec.fieldContext_Player_town(ctx, field)
			case "posX":
				return ec.fieldContext_Player_posX(ctx, field)
			case "posY":
				return ec.fieldContext_Player_posY(ctx, field)
			case "posZ":
				return ec.fieldContext_Player_posZ(ctx, field)
			case "cap":
				return ec.fieldContext_Player_cap(ctx, field)
			case "sex":
				return ec.fieldContext_Player_sex(ctx, field)
			case "lastLogin":
				return ec.fieldContext_Player_lastLogin(ctx, field)
			case "balance":
				return ec.fieldContext_Player_balance(ctx, field)
			case "deaths":
				return ec.fieldContext_Player_deaths(ctx, field)
			case "guild":
				return ec.fieldContext_Player_guild(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Player", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_player_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_players(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_players,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Players(ctx, fc.Args["accountId"].(string))
		},
		nil,
		ec.marshalNPlayer2ᚕᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐPlayerᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_players(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Player_id(ctx, field)
			case "name":
				return ec.fieldContext_Player_name(ctx, field)
			case "accountId":
				return ec.fieldContext_Player_accountId(ctx, field)
			case "account":
				return ec.fieldContext_Player_account(ctx, field)
			case "level":
				return ec.fieldContext_Player_level(ctx, field)
			case "vocation":
				return ec.fieldContext_Player_vocation(ctx, field)
			case "health":
				return ec.fieldContext_Player_health(ctx, field)
			case "healthMax":
				return ec.fieldContext_Player_healthMax(ctx, field)
			case "experience":
				return ec.fieldContext_Player_experience(ctx, field)
			case "lookBody":
				return ec.fieldContext_Player_lookBody(ctx, field)
			case "lookFeet":
				return ec.fieldContext_Player_lookFeet(ctx, field)
			case "lookHead":
				return ec.fieldContext_Player_lookHead(ctx, field)
			case "lookLegs":
				return ec.fieldContext_Player_lookLegs(ctx, field)
			case "lookType":
				return ec.fieldContext_Player_lookType(ctx, field)
			case "lookAddons":
				return ec.fieldContext_Player_lookAddons(ctx, field)
			case "magLevel":
				return ec.fieldContext_Player_magLevel(ctx, field)
			case "mana":
				return ec.fieldContext_Player_mana(ctx, field)
			case "manaMax":
				return ec.fieldContext_Player_manaMax(ctx, field)
			case "soul":
				return ec.fieldContext_Player_soul(ctx, field)
			case "townId":
				return ec.fieldContext_Player_townId(ctx, field)
			case "town":
				return ec.fieldContext_Player_town(ctx, field)
			case "posX":
				return ec.fieldContext_Player_posX(ctx, field)
			case "posY":
				return ec.fieldContext_Player_posY(ctx, field)
			case "posZ":
				return ec.fieldContext_Player_posZ(ctx, field)
			case "cap":
				return ec.fieldContext_Player_cap(ctx, field)
			case "sex":
				return ec.fieldContext_Player_sex(ctx, field)
			case "lastLogin":
				return ec.fieldContext_Player_lastLogin(ctx, field)
			case "balance":
				return ec.fieldContext_Player_balance(ctx, field)
			case "deaths":
				return ec.fieldContext_Player_deaths(ctx, field)
			case "guild":
				return ec.fieldContext_Player_guild(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Player", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_players_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_playersOnline(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_playersOnline,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().PlayersOnline(ctx)
		},
		nil,
		ec.marshalNPlayer2ᚕᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐPlayerᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_playersOnline(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Player_id(ctx, field)
			case "name":
				return ec.fieldContext_Player_name(ctx, field)
			case "accountId":
				return ec.fieldContext_Player_accountId(ctx, field)
			case "account":
				return ec.fieldContext_Player_account(ctx, field)
			case "level":
				return ec.fieldContext_Player_level(ctx, field)
			case "vocation":
				return ec.fieldContext_Player_vocation(ctx, field)
			case "health":
				return ec.fieldContext_Player_health(ctx, field)
			case "healthMax":
				return ec.fieldContext_Player_healthMax(ctx, field)
			case "experience":
				return ec.fieldContext_Player_experience(ctx, field)
			case "lookBody":
				return ec.fieldContext_Player_lookBody(ctx, field)
			case "lookFeet":
				return ec.fieldContext_Player_lookFeet(ctx, field)
			case "lookHead":
				return ec.fieldContext_Player_lookHead(ctx, field)
			case "lookLegs":
				return ec.fieldContext_Player_lookLegs(ctx, field)
			case "lookType":
				return ec.fieldContext_Player_lookType(ctx, field)
			case "lookAddons":
				return ec.fieldContext_Player_lookAddons(ctx, field)
			case "magLevel":
				return ec.fieldContext_Player_magLevel(ctx, field)
			case "mana":
				return ec.fieldContext_Player_mana(ctx, field)
			case "manaMax":
				return ec.fieldContext_Player_manaMax(ctx, field)
			case "soul":
				return ec.fieldContext_Player_soul(ctx, field)
			case "townId":
				return ec.fieldContext_Player_townId(ctx, field)
			case "town":
				return ec.fieldContext_Player_town(ctx, field)
			case "posX":
				return ec.fieldContext_Player_posX(ctx, field)
			case "posY":
				return ec.fieldContext_Player_posY(ctx, field)
			case "posZ":
				return ec.fieldContext_Player_posZ(ctx, field)
			case "cap":
				return ec.fieldContext_Player_cap(ctx, field)
			case "sex":
				return ec.fieldContext_Player_sex(ctx, field)
			case "lastLogin":
				return ec.fieldContext_Player_lastLogin(ctx, field)
			case "balance":
				return ec.fieldContext_Player_balance(ctx, field)
			case "deaths":
				return ec.fieldContext_Player_deaths(ctx, field)
			case "guild":
				return ec.fieldContext_Player_guild(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Player", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_town(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_town,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Town(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalOTown2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐTown,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_town(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Town_id(ctx, field)
			case "name":
				return ec.fieldContext_Town_name(ctx, field)
			case "posX":
				return ec.fieldContext_Town_posX(ctx, field)
			case "posY":
				return ec.fieldContext_Town_posY(ctx, field)
			case "posZ":
				return ec.fieldContext_Town_posZ(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Town", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_town_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_towns(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_towns,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().Towns(ctx)
		},
		nil,
		ec.marshalNTown2ᚕᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐTownᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_towns(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Town_id(ctx, field)
			case "name":
				return ec.fieldContext_Town_name(ctx, field)
			case "posX":
				return ec.fieldContext_Town_posX(ctx, field)
			case "posY":
				return ec.fieldContext_Town_posY(ctx, field)
			case "posZ":
				return ec.fieldContext_Town_posZ(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Town", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_guild(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_guild,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Guild(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalOGuild2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐGuild,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_guild(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Guild_id(ctx, field)
			case "name":
				return ec.fieldContext_Guild_name(ctx, field)
			case "ownerId":
				return ec.fieldContext_Guild_ownerId(ctx, field)
			case "owner":
				return ec.fieldContext_Guild_owner(ctx, field)
			case "creationData":
				return ec.fieldContext_Guild_creationData(ctx, field)
			case "motd":
				return ec.fieldContext_Guild_motd(ctx, field)
			case "ranks":
				return ec.fieldContext_Guild_ranks(ctx, field)
			case "members":
				return ec.fieldContext_Guild_members(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Guild", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_guild_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_guilds(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_guilds,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().Guilds(ctx)
		},
		nil,
		ec.marshalNGuild2ᚕᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐGuildᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_guilds(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Guild_id(ctx, field)
			case "name":
				return ec.fieldContext_Guild_name(ctx, field)
			case "ownerId":
				return ec.fieldContext_Guild_ownerId(ctx, field)
			case "owner":
				return ec.fieldContext_Guild_owner(ctx, field)
			case "creationData":
				return ec.fieldContext_Guild_creationData(ctx, field)
			case "motd":
				return ec.fieldContext_Guild_motd(ctx, field)
			case "ranks":
				return ec.fieldContext_Guild_ranks(ctx, field)
			case "members":
				return ec.fieldContext_Guild_members(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Guild", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_guildWars(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_guildWars,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GuildWars(ctx, fc.Args["guildId"].(*string))
		},
		nil,
		ec.marshalNGuildWar2ᚕᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐGuildWarᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_guildWars(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GuildWar_id(ctx, field)
			case "guild1":
				return ec.fieldContext_GuildWar_guild1(ctx, field)
			case "guild2":
				return ec.fieldContext_GuildWar_guild2(ctx, field)
			case "name1":
				return ec.fieldContext_GuildWar_name1(ctx, field)
			case "name2":
				return ec.fieldContext_GuildWar_name2(ctx, field)
			case "status":
				return ec.fieldContext_GuildWar_status(ctx, field)
			case "started":
				return ec.fieldContext_GuildWar_started(ctx, field)
			case "ended":
				return ec.fieldContext_GuildWar_ended(ctx, field)
			case "kills":
				return ec.fieldContext_GuildWar_kills(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GuildWar", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_guildWars_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_house(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_house,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().House(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalOHouse2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐHouse,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_house(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_House_id(ctx, field)
			case "owner":
				return ec.fieldContext_House_owner(ctx, field)
			case "paid":
				return ec.fieldContext_House_paid(ctx, field)
			case "warnings":
				return ec.fieldContext_House_warnings(ctx, field)
			case "name":
				return ec.fieldContext_House_name(ctx, field)
			case "rent":
				return ec.fieldContext_House_rent(ctx, field)
			case "townId":
				return ec.fieldContext_House_townId(ctx, field)
			case "town":
				return ec.fieldContext_House_town(ctx, field)
			case "bid":
				return ec.fieldContext_House_bid(ctx, field)
			case "bidEnd":
				return ec.fieldContext_House_bidEnd(ctx, field)
			case "lastBid":
				return ec.fieldContext_House_lastBid(ctx, field)
			case "highestBidder":
				return ec.fieldContext_House_highestBidder(ctx, field)
			case "size":
				return ec.fieldContext_House_size(ctx, field)
			case "beds":
				return ec.fieldContext_House_beds(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type House", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_house_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_houses(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_houses,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Houses(ctx, fc.Args["townId"].(*string))
		},
		nil,
		ec.marshalNHouse2ᚕᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐHouseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_houses(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_House_id(ctx, field)
			case "owner":
				return ec.fieldContext_House_owner(ctx, field)
			case "paid":
				return ec.fieldContext_House_paid(ctx, field)
			case "warnings":
				return ec.fieldContext_House_warnings(ctx, field)
			case "name":
				return ec.fieldContext_House_name(ctx, field)
			case "rent":
				return ec.fieldContext_House_rent(ctx, field)
			case "townId":
				return ec.fieldContext_House_townId(ctx, field)
			case "town":
				return ec.fieldContext_House_town(ctx, field)
			case "bid":
				return ec.fieldContext_House_bid(ctx, field)
			case "bidEnd":
				return ec.fieldContext_House_bidEnd(ctx, field)
			case "lastBid":
				return ec.fieldContext_House_lastBid(ctx, field)
			case "highestBidder":
				return ec.fieldContext_House_highestBidder(ctx, field)
			case "size":
				return ec.fieldContext_House_size(ctx, field)
			case "beds":
				return ec.fieldContext_House_beds(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type House", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_houses_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_marketOffers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_marketOffers,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().MarketOffers(ctx, fc.Args["itemType"].(*int))
		},
		nil,
		ec.marshalNMarketOffer2ᚕᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐMarketOfferᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_marketOffers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MarketOffer_id(ctx, field)
			case "playerId":
				return ec.fieldContext_MarketOffer_playerId(ctx, field)
			case "player":
				return ec.fieldContext_MarketOffer_player(ctx, field)
			case "sale":
				return ec.fieldContext_MarketOffer_sale(ctx, field)
			case "itemType":
				return ec.fieldContext_MarketOffer_itemType(ctx, field)
			case "amount":
				return ec.fieldContext_MarketOffer_amount(ctx, field)
			case "created":
				return ec.fieldContext_MarketOffer_created(ctx, field)
			case "anonymous":
				return ec.fieldContext_MarketOffer_anonymous(ctx, field)
			case "price":
				return ec.fieldContext_MarketOffer_price(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MarketOffer", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_marketOffers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_marketHistory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_marketHistory,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().MarketHistory(ctx, fc.Args["playerId"].(string))
		},
		nil,
		ec.marshalNMarketHistory2ᚕᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐMarketHistoryᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_marketHistory(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MarketHistory_id(ctx, field)
			case "playerId":
				return ec.fieldContext_MarketHistory_playerId(ctx, field)
			case "player":
				return ec.fieldContext_MarketHistory_player(ctx, field)
			case "sale":
				return ec.fieldContext_MarketHistory_sale(ctx, field)
			case "itemType":
				return ec.fieldContext_MarketHistory_itemType(ctx, field)
			case "amount":
				return ec.fieldContext_MarketHistory_amount(ctx, field)
			case "price":
				return ec.fieldContext_MarketHistory_price(ctx, field)
			case "expiresAt":
				return ec.fieldContext_MarketHistory_expiresAt(ctx, field)
			case "inserted":
				return ec.fieldContext_MarketHistory_inserted(ctx, field)
			case "state":
				return ec.fieldContext_MarketHistory_state(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MarketHistory", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_marketHistory_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query___type,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.introspectType(fc.Args["name"].(string))
		},
		nil,
		ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query___schema,
		func(ctx context.Context) (any, error) {
			return ec.introspectSchema()
		},
		nil,
		ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query___schema(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Town_id(ctx context.Context, field graphql.CollectedField, obj *models.Town) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Town_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Town_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Town",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Town_name(ctx context.Context, field graphql.CollectedField, obj *models.Town) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Town_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Town_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Town",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Town_posX(ctx context.Context, field graphql.CollectedField, obj *models.Town) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Town_posX,
		func(ctx context.Context) (any, error) {
			return obj.PosX, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Town_posX(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Town",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Town_posY(ctx context.Context, field graphql.CollectedField, obj *models.Town) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Town_posY,
		func(ctx context.Context) (any, error) {
			return obj.PosY, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Town_posY(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Town",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Town_posZ(ctx context.Context, field graphql.CollectedField, obj *models.Town) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Town_posZ,
		func(ctx context.Context) (any, error) {
			return obj.PosZ, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Town_posZ(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Town",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VipEntry_accountId(ctx context.Context, field graphql.CollectedField, obj *models.VipEntry) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_VipEntry_accountId,
		func(ctx context.Context) (any, error) {
			return obj.AccountID, nil
		},
		nil,
		ec.marshalNID2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_VipEntry_accountId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VipEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VipEntry_playerId(ctx context.Context, field graphql.CollectedField, obj *models.VipEntry) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_VipEntry_playerId,
		func(ctx context.Context) (any, error) {
			return obj.PlayerID, nil
		},
		nil,
		ec.marshalNID2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_VipEntry_playerId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VipEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VipEntry_player(ctx context.Context, field graphql.CollectedField, obj *models.VipEntry) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_VipEntry_player,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.VipEntry().Player(ctx, obj)
		},
		nil,
		ec.marshalNPlayer2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐPlayer,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_VipEntry_player(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VipEntry",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Player_id(ctx, field)
			case "name":
				return ec.fieldContext_Player_name(ctx, field)
			case "accountId":
				return ec.fieldContext_Player_accountId(ctx, field)
			case "account":
				return ec.fieldContext_Player_account(ctx, field)
			case "level":
				return ec.fieldContext_Player_level(ctx, field)
			case "vocation":
				return ec.fieldContext_Player_vocation(ctx, field)
			case "health":
				return ec.fieldContext_Player_health(ctx, field)
			case "healthMax":
				return ec.fieldContext_Player_healthMax(ctx, field)
			case "experience":
				return ec.fieldContext_Player_experience(ctx, field)
			case "lookBody":
				return ec.fieldContext_Player_lookBody(ctx, field)
			case "lookFeet":
				return ec.fieldContext_Player_lookFeet(ctx, field)
			case "lookHead":
				return ec.fieldContext_Player_lookHead(ctx, field)
			case "lookLegs":
				return ec.fieldContext_Player_lookLegs(ctx, field)
			case "lookType":
				return ec.fieldContext_Player_lookType(ctx, field)
			case "lookAddons":
				return ec.fieldContext_Player_lookAddons(ctx, field)
			case "magLevel":
				return ec.fieldContext_Player_magLevel(ctx, field)
			case "mana":
				return ec.fieldContext_Player_mana(ctx, field)
			case "manaMax":
				return ec.fieldContext_Player_manaMax(ctx, field)
			case "soul":
				return ec.fieldContext_Player_soul(ctx, field)
			case "townId":
				return ec.fieldContext_Player_townId(ctx, field)
			case "town":
				return ec.fieldContext_Player_town(ctx, field)
			case "posX":
				return ec.fieldContext_Player_posX(ctx, field)
			case "posY":
				return ec.fieldContext_Player_posY(ctx, field)
			case "posZ":
				return ec.fieldContext_Player_posZ(ctx, field)
			case "cap":
				return ec.fieldContext_Player_cap(ctx, field)
			case "sex":
				return ec.fieldContext_Player_sex(ctx, field)
			case "lastLogin":
				return ec.fieldContext_Player_lastLogin(ctx, field)
			case "balance":
				return ec.fieldContext_Player_balance(ctx, field)
			case "deaths":
				return ec.fieldContext_Player_deaths(ctx, field)
			case "guild":
				return ec.fieldContext_Player_guild(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Player", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _VipEntry_description(ctx context.Context, field graphql.CollectedField, obj *models.VipEntry) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_VipEntry_description,
		func(ctx context.Context) (any, error) {
			return obj.Description, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_VipEntry_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VipEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VipEntry_icon(ctx context.Context, field graphql.CollectedField, obj *models.VipEntry) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_VipEntry_icon,
		func(ctx context.Context) (any, error) {
			return obj.Icon, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_VipEntry_icon(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VipEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VipEntry_notify(ctx context.Context, field graphql.CollectedField, obj *models.VipEntry) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_VipEntry_notify,
		func(ctx context.Context) (any, error) {
			return obj.Notify, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_VipEntry_notify(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VipEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Directive_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Directive_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_isRepeatable,
		func(ctx context.Context) (any, error) {
			return obj.IsRepeatable, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_locations,
		func(ctx context.Context) (any, error) {
			return obj.Locations, nil
		},
		nil,
		ec.marshalN__DirectiveLocation2ᚕstringᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Directive_locations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_args,
		func(ctx context.Context) (any, error) {
			return obj.Args, nil
		},
		nil,
		ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Directive_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___EnumValue_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___EnumValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___EnumValue_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___EnumValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___EnumValue_isDeprecated,
		func(ctx context.Context) (any, error) {
			return obj.IsDeprecated(), nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___EnumValue_deprecationReason,
		func(ctx context.Context) (any, error) {
			return obj.DeprecationReason(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Field_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Field_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_args,
		func(ctx context.Context) (any, error) {
			return obj.Args, nil
		},
		nil,
		ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Field_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_type,
		func(ctx context.Context) (any, error) {
			return obj.Type, nil
		},
		nil,
		ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Field_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_isDeprecated,
		func(ctx context.Context) (any, error) {
			return obj.IsDeprecated(), nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_deprecationReason,
		func(ctx context.Context) (any, error) {
			return obj.DeprecationReason(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___InputValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___InputValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_type,
		func(ctx context.Context) (any, error) {
			return obj.Type, nil
		},
		nil,
		ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___InputValue_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_defaultValue,
		func(ctx context.Context) (any, error) {
			return obj.DefaultValue, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_isDeprecated,
		func(ctx context.Context) (any, error) {
			return obj.IsDeprecated(), nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___InputValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_deprecationReason,
		func(ctx context.Context) (any, error) {
			return obj.DeprecationReason(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___InputValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Schema_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_types,
		func(ctx context.Context) (any, error) {
			return obj.Types(), nil
		},
		nil,
		ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Schema_types(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_queryType,
		func(ctx context.Context) (any, error) {
			return obj.QueryType(), nil
		},
		nil,
		ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Schema_queryType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_mutationType,
		func(ctx context.Context) (any, error) {
			return obj.MutationType(), nil
		},
		nil,
		ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Schema_mutationType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_subscriptionType,
		func(ctx context.Context) (any, error) {
			return obj.SubscriptionType(), nil
		},
		nil,
		ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_directives,
		func(ctx context.Context) (any, error) {
			return obj.Directives(), nil
		},
		nil,
		ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Schema_directives(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_kind,
		func(ctx context.Context) (any, error) {
			return obj.Kind(), nil
		},
		nil,
		ec.marshalN__TypeKind2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Type_kind(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_name,
		func(ctx context.Context) (any, error) {
			return obj.Name(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_specifiedByURL,
		func(ctx context.Context) (any, error) {
			return obj.SpecifiedByURL(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_fields,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
		},
		nil,
		ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_interfaces,
		func(ctx context.Context) (any, error) {
			return obj.Interfaces(), nil
		},
		nil,
		ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_interfaces(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_possibleTypes,
		func(ctx context.Context) (any, error) {
			return obj.PossibleTypes(), nil
		},
		nil,
		ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_enumValues,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
		},
		nil,
		ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_inputFields,
		func(ctx context.Context) (any, error) {
			return obj.InputFields(), nil
		},
		nil,
		ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_inputFields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_ofType,
		func(ctx context.Context) (any, error) {
			return obj.OfType(), nil
		},
		nil,
		ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_ofType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_isOneOf(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_isOneOf,
		func(ctx context.Context) (any, error) {
			return obj.IsOneOf(), nil
		},
		nil,
		ec.marshalOBoolean2bool,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_isOneOf(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBanAccountInput(ctx context.Context, obj any) (models.BanAccountInput, error) {
	var it models.BanAccountInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"accountId", "reason", "expiresAt", "bannedBy"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "accountId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountId"))
			data, err := ec.unmarshalNID2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountID = data
		case "reason":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reason"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Reason = data
		case "expiresAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiresAt"))
			data, err := ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiresAt = data
		case "bannedBy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bannedBy"))
			data, err := ec.unmarshalNID2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.BannedBy = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateAccountInput(ctx context.Context, obj any) (models.CreateAccountInput, error) {
	var it models.CreateAccountInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "password", "email"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateGuildInput(ctx context.Context, obj any) (models.CreateGuildInput, error) {
	var it models.CreateGuildInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "ownerId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "ownerId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerId"))
			data, err := ec.unmarshalNID2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateMarketOfferInput(ctx context.Context, obj any) (models.CreateMarketOfferInput, error) {
	var it models.CreateMarketOfferInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"playerId", "sale", "itemType", "amount", "price", "anonymous"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "playerId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("playerId"))
			data, err := ec.unmarshalNID2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlayerID = data
		case "sale":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sale"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Sale = data
		case "itemType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("itemType"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.ItemType = data
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		case "price":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Price = data
		case "anonymous":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("anonymous"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Anonymous = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreatePlayerInput(ctx context.Context, obj any) (models.CreatePlayerInput, error) {
	var it models.CreatePlayerInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "accountId", "sex", "vocation"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "accountId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountId"))
			data, err := ec.unmarshalNID2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountID = data
		case "sex":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Sex = data
		case "vocation":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vocation"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Vocation = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateTownInput(ctx context.Context, obj any) (models.CreateTownInput, error) {
	var it models.CreateTownInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "posX", "posY", "posZ"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "posX":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("posX"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.PosX = data
		case "posY":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("posY"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.PosY = data
		case "posZ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("posZ"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.PosZ = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var accountImplementors = []string{"Account"}

func (ec *executionContext) _Account(ctx context.Context, sel ast.SelectionSet, obj *models.Account) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Account")
		case "id":
			out.Values[i] = ec._Account_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Account_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "email":
			out.Values[i] = ec._Account_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			out.Values[i] = ec._Account_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "premiumEndsAt":
			out.Values[i] = ec._Account_premiumEndsAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "creation":
			out.Values[i] = ec._Account_creation(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "players":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Account_players(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "bans":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Account_bans(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "storage":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Account_storage(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "vipList":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Account_vipList(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var accountBanImplementors = []string{"AccountBan"}

func (ec *executionContext) _AccountBan(ctx context.Context, sel ast.SelectionSet, obj *models.AccountBan) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountBanImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountBan")
		case "accountId":
			out.Values[i] = ec._AccountBan_accountId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "account":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AccountBan_account(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "reason":
			out.Values[i] = ec._AccountBan_reason(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "bannedAt":
			out.Values[i] = ec._AccountBan_bannedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "expiresAt":
			out.Values[i] = ec._AccountBan_expiresAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "bannedBy":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AccountBan_bannedBy(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var accountStorageImplementors = []string{"AccountStorage"}

func (ec *executionContext) _AccountStorage(ctx context.Context, sel ast.SelectionSet, obj *models.AccountStorage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountStorageImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountStorage")
		case "accountId":
			out.Values[i] = ec._AccountStorage_accountId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "key":
			out.Values[i] = ec._AccountStorage_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._AccountStorage_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var guildImplementors = []string{"Guild"}

func (ec *executionContext) _Guild(ctx context.Context, sel ast.SelectionSet, obj *models.Guild) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, guildImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Guild")
		case "id":
			out.Values[i] = ec._Guild_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Guild_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "ownerId":
			out.Values[i] = ec._Guild_ownerId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "owner":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Guild_owner(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "creationData":
			out.Values[i] = ec._Guild_creationData(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "motd":
			out.Values[i] = ec._Guild_motd(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "ranks":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Guild_ranks(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "members":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Guild_members(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var guildInviteImplementors = []string{"GuildInvite"}

func (ec *executionContext) _GuildInvite(ctx context.Context, sel ast.SelectionSet, obj *models.GuildInvite) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, guildInviteImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GuildInvite")
		case "playerId":
			out.Values[i] = ec._GuildInvite_playerId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "guildId":
			out.Values[i] = ec._GuildInvite_guildId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "player":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._GuildInvite_player(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "guild":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._GuildInvite_guild(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var guildMembershipImplementors = []string{"GuildMembership"}

func (ec *executionContext) _GuildMembership(ctx context.Context, sel ast.SelectionSet, obj *models.GuildMembership) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, guildMembershipImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GuildMembership")
		case "playerId":
			out.Values[i] = ec._GuildMembership_playerId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "player":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._GuildMembership_player(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "guildId":
			out.Values[i] = ec._GuildMembership_guildId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "guild":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._GuildMembership_guild(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "rankId":
			out.Values[i] = ec._GuildMembership_rankId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "rank":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._GuildMembership_rank(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "nick":
			out.Values[i] = ec._GuildMembership_nick(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var guildRankImplementors = []string{"GuildRank"}

func (ec *executionContext) _GuildRank(ctx context.Context, sel ast.SelectionSet, obj *models.GuildRank) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, guildRankImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GuildRank")
		case "id":
			out.Values[i] = ec._GuildRank_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "guildId":
			out.Values[i] = ec._GuildRank_guildId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "guild":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._GuildRank_guild(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "name":
			out.Values[i] = ec._GuildRank_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "level":
			out.Values[i] = ec._GuildRank_level(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var guildWarImplementors = []string{"GuildWar"}

func (ec *executionContext) _GuildWar(ctx context.Context, sel ast.SelectionSet, obj *models.GuildWar) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, guildWarImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GuildWar")
		case "id":
			out.Values[i] = ec._GuildWar_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "guild1":
			out.Values[i] = ec._GuildWar_guild1(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "guild2":
			out.Values[i] = ec._GuildWar_guild2(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name1":
			out.Values[i] = ec._GuildWar_name1(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name2":
			out.Values[i] = ec._GuildWar_name2(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "status":
			out.Values[i] = ec._GuildWar_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "started":
			out.Values[i] = ec._GuildWar_started(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "ended":
			out.Values[i] = ec._GuildWar_ended(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "kills":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._GuildWar_kills(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var guildWarKillImplementors = []string{"GuildWarKill"}

func (ec *executionContext) _GuildWarKill(ctx context.Context, sel ast.SelectionSet, obj *models.GuildWarKill) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, guildWarKillImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GuildWarKill")
		case "id":
			out.Values[i] = ec._GuildWarKill_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "killer":
			out.Values[i] = ec._GuildWarKill_killer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "target":
			out.Values[i] = ec._GuildWarKill_target(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "killerGuild":
			out.Values[i] = ec._GuildWarKill_killerGuild(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "targetGuild":
			out.Values[i] = ec._GuildWarKill_targetGuild(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "warId":
			out.Values[i] = ec._GuildWarKill_warId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "time":
			out.Values[i] = ec._GuildWarKill_time(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var houseImplementors = []string{"House"}

func (ec *executionContext) _House(ctx context.Context, sel ast.SelectionSet, obj *models.House) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, houseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("House")
		case "id":
			out.Values[i] = ec._House_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "owner":
			out.Values[i] = ec._House_owner(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "paid":
			out.Values[i] = ec._House_paid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "warnings":
			out.Values[i] = ec._House_warnings(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._House_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "rent":
			out.Values[i] = ec._House_rent(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "townId":
			out.Values[i] = ec._House_townId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "town":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._House_town(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "bid":
			out.Values[i] = ec._House_bid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "bidEnd":
			out.Values[i] = ec._House_bidEnd(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastBid":
			out.Values[i] = ec._House_lastBid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "highestBidder":
			out.Values[i] = ec._House_highestBidder(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "size":
			out.Values[i] = ec._House_size(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "beds":
			out.Values[i] = ec._House_beds(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var houseListImplementors = []string{"HouseList"}

func (ec *executionContext) _HouseList(ctx context.Context, sel ast.SelectionSet, obj *models.HouseList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, houseListImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HouseList")
		case "houseId":
			out.Values[i] = ec._HouseList_houseId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "listId":
			out.Values[i] = ec._HouseList_listId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "list":
			out.Values[i] = ec._HouseList_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var marketHistoryImplementors = []string{"MarketHistory"}

func (ec *executionContext) _MarketHistory(ctx context.Context, sel ast.SelectionSet, obj *models.MarketHistory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, marketHistoryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MarketHistory")
		case "id":
			out.Values[i] = ec._MarketHistory_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "playerId":
			out.Values[i] = ec._MarketHistory_playerId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "player":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MarketHistory_player(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "sale":
			out.Values[i] = ec._MarketHistory_sale(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "itemType":
			out.Values[i] = ec._MarketHistory_itemType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "amount":
			out.Values[i] = ec._MarketHistory_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "price":
			out.Values[i] = ec._MarketHistory_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "expiresAt":
			out.Values[i] = ec._MarketHistory_expiresAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "inserted":
			out.Values[i] = ec._MarketHistory_inserted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "state":
			out.Values[i] = ec._MarketHistory_state(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var marketOfferImplementors = []string{"MarketOffer"}

func (ec *executionContext) _MarketOffer(ctx context.Context, sel ast.SelectionSet, obj *models.MarketOffer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, marketOfferImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MarketOffer")
		case "id":
			out.Values[i] = ec._MarketOffer_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "playerId":
			out.Values[i] = ec._MarketOffer_playerId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "player":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MarketOffer_player(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "sale":
			out.Values[i] = ec._MarketOffer_sale(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "itemType":
			out.Values[i] = ec._MarketOffer_itemType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "amount":
			out.Values[i] = ec._MarketOffer_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "created":
			out.Values[i] = ec._MarketOffer_created(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "anonymous":
			out.Values[i] = ec._MarketOffer_anonymous(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "price":
			out.Values[i] = ec._MarketOffer_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createAccount":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createAccount(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "banAccount":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_banAccount(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createPlayer":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createPlayer(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createTown":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createTown(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createGuild":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createGuild(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "inviteToGuild":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_inviteToGuild(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "acceptGuildInvite":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_acceptGuildInvite(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bidHouse":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_bidHouse(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createMarketOffer":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createMarketOffer(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var playerImplementors = []string{"Player"}

func (ec *executionContext) _Player(ctx context.Context, sel ast.SelectionSet, obj *models.Player) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, playerImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Player")
		case "id":
			out.Values[i] = ec._Player_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Player_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "accountId":
			out.Values[i] = ec._Player_accountId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "account":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Player_account(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "level":
			out.Values[i] = ec._Player_level(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "vocation":
			out.Values[i] = ec._Player_vocation(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "health":
			out.Values[i] = ec._Player_health(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "healthMax":
			out.Values[i] = ec._Player_healthMax(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "experience":
			out.Values[i] = ec._Player_experience(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lookBody":
			out.Values[i] = ec._Player_lookBody(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lookFeet":
			out.Values[i] = ec._Player_lookFeet(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lookHead":
			out.Values[i] = ec._Player_lookHead(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lookLegs":
			out.Values[i] = ec._Player_lookLegs(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lookType":
			out.Values[i] = ec._Player_lookType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lookAddons":
			out.Values[i] = ec._Player_lookAddons(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "magLevel":
			out.Values[i] = ec._Player_magLevel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "mana":
			out.Values[i] = ec._Player_mana(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "manaMax":
			out.Values[i] = ec._Player_manaMax(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "soul":
			out.Values[i] = ec._Player_soul(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "townId":
			out.Values[i] = ec._Player_townId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "town":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Player_town(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "posX":
			out.Values[i] = ec._Player_posX(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "posY":
			out.Values[i] = ec._Player_posY(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "posZ":
			out.Values[i] = ec._Player_posZ(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "cap":
			out.Values[i] = ec._Player_cap(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "sex":
			out.Values[i] = ec._Player_sex(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastLogin":
			out.Values[i] = ec._Player_lastLogin(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "balance":
			out.Values[i] = ec._Player_balance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "deaths":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Player_deaths(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "guild":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Player_guild(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var playerDeathImplementors = []string{"PlayerDeath"}

func (ec *executionContext) _PlayerDeath(ctx context.Context, sel ast.SelectionSet, obj *models.PlayerDeath) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, playerDeathImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlayerDeath")
		case "playerId":
			out.Values[i] = ec._PlayerDeath_playerId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "time":
			out.Values[i] = ec._PlayerDeath_time(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "level":
			out.Values[i] = ec._PlayerDeath_level(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "killedBy":
			out.Values[i] = ec._PlayerDeath_killedBy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isPlayer":
			out.Values[i] = ec._PlayerDeath_isPlayer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mostDamageBy":
			out.Values[i] = ec._PlayerDeath_mostDamageBy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mostDamageIsPlayer":
			out.Values[i] = ec._PlayerDeath_mostDamageIsPlayer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var playerStorageImplementors = []string{"PlayerStorage"}

func (ec *executionContext) _PlayerStorage(ctx context.Context, sel ast.SelectionSet, obj *models.PlayerStorage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, playerStorageImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlayerStorage")
		case "playerId":
			out.Values[i] = ec._PlayerStorage_playerId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "key":
			out.Values[i] = ec._PlayerStorage_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._PlayerStorage_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "account":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_account(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "accounts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_accounts(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "player":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_player(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "players":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_players(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "playersOnline":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_playersOnline(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "town":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_town(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "towns":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_towns(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "guild":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_guild(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "guilds":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_guilds(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "guildWars":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_guildWars(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "house":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_house(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "houses":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_houses(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "marketOffers":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_marketOffers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "marketHistory":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_marketHistory(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var townImplementors = []string{"Town"}

func (ec *executionContext) _Town(ctx context.Context, sel ast.SelectionSet, obj *models.Town) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, townImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Town")
		case "id":
			out.Values[i] = ec._Town_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Town_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "posX":
			out.Values[i] = ec._Town_posX(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "posY":
			out.Values[i] = ec._Town_posY(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "posZ":
			out.Values[i] = ec._Town_posZ(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var vipEntryImplementors = []string{"VipEntry"}

func (ec *executionContext) _VipEntry(ctx context.Context, sel ast.SelectionSet, obj *models.VipEntry) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vipEntryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VipEntry")
		case "accountId":
			out.Values[i] = ec._VipEntry_accountId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "playerId":
			out.Values[i] = ec._VipEntry_playerId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "player":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._VipEntry_player(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "description":
			out.Values[i] = ec._VipEntry_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "icon":
			out.Values[i] = ec._VipEntry_icon(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "notify":
			out.Values[i] = ec._VipEntry_notify(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___InputValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___InputValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "isOneOf":
			out.Values[i] = ec.___Type_isOneOf(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNAccount2githubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐAccount(ctx context.Context, sel ast.SelectionSet, v models.Account) graphql.Marshaler {
	return ec._Account(ctx, sel, &v)
}

func (ec *executionContext) marshalNAccount2ᚕᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐAccountᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.Account) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAccount2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐAccount(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAccount2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐAccount(ctx context.Context, sel ast.SelectionSet, v *models.Account) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Account(ctx, sel, v)
}

func (ec *executionContext) marshalNAccountBan2githubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐAccountBan(ctx context.Context, sel ast.SelectionSet, v models.AccountBan) graphql.Marshaler {
	return ec._AccountBan(ctx, sel, &v)
}

func (ec *executionContext) marshalNAccountBan2ᚕᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐAccountBanᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.AccountBan) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAccountBan2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐAccountBan(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAccountBan2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐAccountBan(ctx context.Context, sel ast.SelectionSet, v *models.AccountBan) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AccountBan(ctx, sel, v)
}

func (ec *executionContext) marshalNAccountStorage2ᚕᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐAccountStorageᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.AccountStorage) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAccountStorage2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐAccountStorage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAccountStorage2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐAccountStorage(ctx context.Context, sel ast.SelectionSet, v *models.AccountStorage) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AccountStorage(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBanAccountInput2githubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐBanAccountInput(ctx context.Context, v any) (models.BanAccountInput, error) {
	res, err := ec.unmarshalInputBanAccountInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNCreateAccountInput2githubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐCreateAccountInput(ctx context.Context, v any) (models.CreateAccountInput, error) {
	res, err := ec.unmarshalInputCreateAccountInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateGuildInput2githubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐCreateGuildInput(ctx context.Context, v any) (models.CreateGuildInput, error) {
	res, err := ec.unmarshalInputCreateGuildInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateMarketOfferInput2githubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐCreateMarketOfferInput(ctx context.Context, v any) (models.CreateMarketOfferInput, error) {
	res, err := ec.unmarshalInputCreateMarketOfferInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreatePlayerInput2githubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐCreatePlayerInput(ctx context.Context, v any) (models.CreatePlayerInput, error) {
	res, err := ec.unmarshalInputCreatePlayerInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateTownInput2githubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐCreateTownInput(ctx context.Context, v any) (models.CreateTownInput, error) {
	res, err := ec.unmarshalInputCreateTownInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGuild2githubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐGuild(ctx context.Context, sel ast.SelectionSet, v models.Guild) graphql.Marshaler {
	return ec._Guild(ctx, sel, &v)
}

func (ec *executionContext) marshalNGuild2ᚕᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐGuildᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.Guild) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGuild2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐGuild(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNGuild2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐGuild(ctx context.Context, sel ast.SelectionSet, v *models.Guild) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Guild(ctx, sel, v)
}

func (ec *executionContext) marshalNGuildMembership2ᚕᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐGuildMembershipᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.GuildMembership) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGuildMembership2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐGuildMembership(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNGuildMembership2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐGuildMembership(ctx context.Context, sel ast.SelectionSet, v *models.GuildMembership) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GuildMembership(ctx, sel, v)
}

func (ec *executionContext) marshalNGuildRank2githubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐGuildRank(ctx context.Context, sel ast.SelectionSet, v models.GuildRank) graphql.Marshaler {
	return ec._GuildRank(ctx, sel, &v)
}

func (ec *executionContext) marshalNGuildRank2ᚕᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐGuildRankᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.GuildRank) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGuildRank2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐGuildRank(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNGuildRank2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐGuildRank(ctx context.Context, sel ast.SelectionSet, v *models.GuildRank) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GuildRank(ctx, sel, v)
}

func (ec *executionContext) marshalNGuildWar2ᚕᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐGuildWarᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.GuildWar) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGuildWar2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐGuildWar(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNGuildWar2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐGuildWar(ctx context.Context, sel ast.SelectionSet, v *models.GuildWar) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GuildWar(ctx, sel, v)
}

func (ec *executionContext) marshalNGuildWarKill2ᚕᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐGuildWarKillᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.GuildWarKill) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGuildWarKill2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐGuildWarKill(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNGuildWarKill2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐGuildWarKill(ctx context.Context, sel ast.SelectionSet, v *models.GuildWarKill) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GuildWarKill(ctx, sel, v)
}

func (ec *executionContext) marshalNHouse2githubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐHouse(ctx context.Context, sel ast.SelectionSet, v models.House) graphql.Marshaler {
	return ec._House(ctx, sel, &v)
}

func (ec *executionContext) marshalNHouse2ᚕᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐHouseᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.House) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNHouse2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐHouse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNHouse2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐHouse(ctx context.Context, sel ast.SelectionSet, v *models.House) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._House(ctx, sel, v)
}

func (ec *executionContext) unmarshalNID2int(ctx context.Context, v any) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v any) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int64(ctx context.Context, v any) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNMarketHistory2ᚕᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐMarketHistoryᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.MarketHistory) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMarketHistory2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐMarketHistory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMarketHistory2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐMarketHistory(ctx context.Context, sel ast.SelectionSet, v *models.MarketHistory) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MarketHistory(ctx, sel, v)
}

func (ec *executionContext) marshalNMarketOffer2githubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐMarketOffer(ctx context.Context, sel ast.SelectionSet, v models.MarketOffer) graphql.Marshaler {
	return ec._MarketOffer(ctx, sel, &v)
}

func (ec *executionContext) marshalNMarketOffer2ᚕᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐMarketOfferᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.MarketOffer) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMarketOffer2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐMarketOffer(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMarketOffer2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐMarketOffer(ctx context.Context, sel ast.SelectionSet, v *models.MarketOffer) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MarketOffer(ctx, sel, v)
}

func (ec *executionContext) marshalNPlayer2githubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐPlayer(ctx context.Context, sel ast.SelectionSet, v models.Player) graphql.Marshaler {
	return ec._Player(ctx, sel, &v)
}

func (ec *executionContext) marshalNPlayer2ᚕᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐPlayerᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.Player) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPlayer2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐPlayer(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPlayer2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐPlayer(ctx context.Context, sel ast.SelectionSet, v *models.Player) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Player(ctx, sel, v)
}

func (ec *executionContext) marshalNPlayerDeath2ᚕᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐPlayerDeathᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.PlayerDeath) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPlayerDeath2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐPlayerDeath(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPlayerDeath2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐPlayerDeath(ctx context.Context, sel ast.SelectionSet, v *models.PlayerDeath) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PlayerDeath(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNTown2githubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐTown(ctx context.Context, sel ast.SelectionSet, v models.Town) graphql.Marshaler {
	return ec._Town(ctx, sel, &v)
}

func (ec *executionContext) marshalNTown2ᚕᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐTownᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.Town) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTown2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐTown(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTown2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐTown(ctx context.Context, sel ast.SelectionSet, v *models.Town) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Town(ctx, sel, v)
}

func (ec *executionContext) marshalNVipEntry2ᚕᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐVipEntryᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.VipEntry) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVipEntry2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐVipEntry(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNVipEntry2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐVipEntry(ctx context.Context, sel ast.SelectionSet, v *models.VipEntry) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._VipEntry(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalOAccount2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐAccount(ctx context.Context, sel ast.SelectionSet, v *models.Account) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Account(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	_ = sel
	_ = ctx
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v any) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOGuild2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐGuild(ctx context.Context, sel ast.SelectionSet, v *models.Guild) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Guild(ctx, sel, v)
}

func (ec *executionContext) marshalOGuildMembership2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐGuildMembership(ctx context.Context, sel ast.SelectionSet, v *models.GuildMembership) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GuildMembership(ctx, sel, v)
}

func (ec *executionContext) marshalOHouse2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐHouse(ctx context.Context, sel ast.SelectionSet, v *models.House) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._House(ctx, sel, v)
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalID(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v any) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) marshalOPlayer2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐPlayer(ctx context.Context, sel ast.SelectionSet, v *models.Player) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Player(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOTown2ᚖgithubᚗcomᚋglinharesbᚋforgottenserverᚑgraphqlᚑapiᚋinternalᚋmodelsᚐTown(ctx context.Context, sel ast.SelectionSet, v *models.Town) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Town(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
