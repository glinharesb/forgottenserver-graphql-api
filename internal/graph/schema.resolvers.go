package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"
	"strconv"

	"github.com/glinharesb/forgottenserver-graphql-api/internal/models"
)

// Players is the resolver for the players field.
func (r *accountResolver) Players(ctx context.Context, obj *models.Account) ([]*models.Player, error) {
	return r.PlayerRepository.GetByAccountID(ctx, obj.ID)
}

// Bans is the resolver for the bans field.
func (r *accountResolver) Bans(ctx context.Context, obj *models.Account) ([]*models.AccountBan, error) {
	return r.AccountBanRepository.GetByAccountID(ctx, obj.ID)
}

// Storage is the resolver for the storage field.
func (r *accountResolver) Storage(ctx context.Context, obj *models.Account) ([]*models.AccountStorage, error) {
	return r.AccountStorageRepository.GetByAccountID(ctx, obj.ID)
}

// VipList is the resolver for the vipList field.
func (r *accountResolver) VipList(ctx context.Context, obj *models.Account) ([]*models.VipEntry, error) {
	return r.AccountStorageRepository.GetVipList(ctx, obj.ID)
}

// Account is the resolver for the account field.
func (r *accountBanResolver) Account(ctx context.Context, obj *models.AccountBan) (*models.Account, error) {
	return r.AccountRepository.GetByID(ctx, obj.AccountID)
}

// BannedBy is the resolver for the bannedBy field.
func (r *accountBanResolver) BannedBy(ctx context.Context, obj *models.AccountBan) (*models.Player, error) {
	return r.PlayerRepository.GetByID(ctx, obj.BannedBy)
}

// Owner is the resolver for the owner field.
func (r *guildResolver) Owner(ctx context.Context, obj *models.Guild) (*models.Player, error) {
	return r.PlayerRepository.GetByID(ctx, obj.OwnerID)
}

// Ranks is the resolver for the ranks field.
func (r *guildResolver) Ranks(ctx context.Context, obj *models.Guild) ([]*models.GuildRank, error) {
	return r.GuildRepository.GetRanks(ctx, obj.ID)
}

// Members is the resolver for the members field.
func (r *guildResolver) Members(ctx context.Context, obj *models.Guild) ([]*models.GuildMembership, error) {
	return r.GuildRepository.GetMembers(ctx, obj.ID)
}

// Player is the resolver for the player field.
func (r *guildInviteResolver) Player(ctx context.Context, obj *models.GuildInvite) (*models.Player, error) {
	return r.PlayerRepository.GetByID(ctx, obj.PlayerID)
}

// Guild is the resolver for the guild field.
func (r *guildInviteResolver) Guild(ctx context.Context, obj *models.GuildInvite) (*models.Guild, error) {
	return r.GuildRepository.GetByID(ctx, obj.GuildID)
}

// Player is the resolver for the player field.
func (r *guildMembershipResolver) Player(ctx context.Context, obj *models.GuildMembership) (*models.Player, error) {
	return r.PlayerRepository.GetByID(ctx, obj.PlayerID)
}

// Guild is the resolver for the guild field.
func (r *guildMembershipResolver) Guild(ctx context.Context, obj *models.GuildMembership) (*models.Guild, error) {
	return r.GuildRepository.GetByID(ctx, obj.GuildID)
}

// Rank is the resolver for the rank field.
func (r *guildMembershipResolver) Rank(ctx context.Context, obj *models.GuildMembership) (*models.GuildRank, error) {
	var rank models.GuildRank
	query := `SELECT id, guild_id, name, level FROM guild_ranks WHERE id = ?`
	if err := r.DB.GetContext(ctx, &rank, query, obj.RankID); err != nil {
		return nil, fmt.Errorf("failed to get rank: %w", err)
	}
	return &rank, nil
}

// Guild is the resolver for the guild field.
func (r *guildRankResolver) Guild(ctx context.Context, obj *models.GuildRank) (*models.Guild, error) {
	return r.GuildRepository.GetByID(ctx, obj.GuildID)
}

// Kills is the resolver for the kills field.
func (r *guildWarResolver) Kills(ctx context.Context, obj *models.GuildWar) ([]*models.GuildWarKill, error) {
	return r.GuildRepository.GetWarKills(ctx, obj.ID)
}

// Town is the resolver for the town field.
func (r *houseResolver) Town(ctx context.Context, obj *models.House) (*models.Town, error) {
	return r.TownRepository.GetByID(ctx, obj.TownID)
}

// Player is the resolver for the player field.
func (r *marketHistoryResolver) Player(ctx context.Context, obj *models.MarketHistory) (*models.Player, error) {
	return r.PlayerRepository.GetByID(ctx, obj.PlayerID)
}

// Player is the resolver for the player field.
func (r *marketOfferResolver) Player(ctx context.Context, obj *models.MarketOffer) (*models.Player, error) {
	return r.PlayerRepository.GetByID(ctx, obj.PlayerID)
}

// CreateAccount is the resolver for the createAccount field.
func (r *mutationResolver) CreateAccount(ctx context.Context, input models.CreateAccountInput) (*models.Account, error) {
	return r.AccountRepository.Create(ctx, input)
}

// BanAccount is the resolver for the banAccount field.
func (r *mutationResolver) BanAccount(ctx context.Context, input models.BanAccountInput) (*models.AccountBan, error) {
	return r.AccountBanRepository.Create(ctx, input)
}

// CreatePlayer is the resolver for the createPlayer field.
func (r *mutationResolver) CreatePlayer(ctx context.Context, input models.CreatePlayerInput) (*models.Player, error) {
	return r.PlayerRepository.Create(ctx, input)
}

// CreateTown is the resolver for the createTown field.
func (r *mutationResolver) CreateTown(ctx context.Context, input models.CreateTownInput) (*models.Town, error) {
	return r.TownRepository.Create(ctx, input)
}

// CreateGuild is the resolver for the createGuild field.
func (r *mutationResolver) CreateGuild(ctx context.Context, input models.CreateGuildInput) (*models.Guild, error) {
	return r.GuildRepository.Create(ctx, input)
}

// InviteToGuild is the resolver for the inviteToGuild field.
func (r *mutationResolver) InviteToGuild(ctx context.Context, guildID string, playerID string) (bool, error) {
	gID, err := strconv.Atoi(guildID)
	if err != nil {
		return false, fmt.Errorf("invalid guild id: %w", err)
	}
	pID, err := strconv.Atoi(playerID)
	if err != nil {
		return false, fmt.Errorf("invalid player id: %w", err)
	}
	err = r.GuildRepository.InvitePlayer(ctx, gID, pID)
	return err == nil, err
}

// AcceptGuildInvite is the resolver for the acceptGuildInvite field.
func (r *mutationResolver) AcceptGuildInvite(ctx context.Context, guildID string, playerID string) (bool, error) {
	gID, err := strconv.Atoi(guildID)
	if err != nil {
		return false, fmt.Errorf("invalid guild id: %w", err)
	}
	pID, err := strconv.Atoi(playerID)
	if err != nil {
		return false, fmt.Errorf("invalid player id: %w", err)
	}
	err = r.GuildRepository.AcceptInvite(ctx, gID, pID)
	return err == nil, err
}

// BidHouse is the resolver for the bidHouse field.
func (r *mutationResolver) BidHouse(ctx context.Context, houseID string, playerID string, bidAmount int) (*models.House, error) {
	hID, err := strconv.Atoi(houseID)
	if err != nil {
		return nil, fmt.Errorf("invalid house id: %w", err)
	}
	pID, err := strconv.Atoi(playerID)
	if err != nil {
		return nil, fmt.Errorf("invalid player id: %w", err)
	}
	return r.HouseRepository.PlaceBid(ctx, hID, pID, bidAmount)
}

// CreateMarketOffer is the resolver for the createMarketOffer field.
func (r *mutationResolver) CreateMarketOffer(ctx context.Context, input models.CreateMarketOfferInput) (*models.MarketOffer, error) {
	return r.MarketRepository.CreateOffer(ctx, input)
}

// Account is the resolver for the account field.
func (r *playerResolver) Account(ctx context.Context, obj *models.Player) (*models.Account, error) {
	return r.AccountRepository.GetByID(ctx, obj.AccountID)
}

// Town is the resolver for the town field.
func (r *playerResolver) Town(ctx context.Context, obj *models.Player) (*models.Town, error) {
	return r.TownRepository.GetByID(ctx, obj.TownID)
}

// Deaths is the resolver for the deaths field.
func (r *playerResolver) Deaths(ctx context.Context, obj *models.Player) ([]*models.PlayerDeath, error) {
	return r.PlayerDeathRepository.GetByPlayerID(ctx, obj.ID)
}

// Guild is the resolver for the guild field.
func (r *playerResolver) Guild(ctx context.Context, obj *models.Player) (*models.GuildMembership, error) {
	return r.GuildRepository.GetMembershipByPlayerID(ctx, obj.ID)
}

// Account is the resolver for the account field.
func (r *queryResolver) Account(ctx context.Context, id string) (*models.Account, error) {
	accountID, err := strconv.Atoi(id)
	if err != nil {
		return nil, fmt.Errorf("invalid account id: %w", err)
	}
	return r.AccountRepository.GetByID(ctx, accountID)
}

// Accounts is the resolver for the accounts field.
func (r *queryResolver) Accounts(ctx context.Context, limit *int) ([]*models.Account, error) {
	queryLimit := 10
	if limit != nil {
		queryLimit = *limit
	}
	return r.AccountRepository.GetAll(ctx, queryLimit)
}

// Player is the resolver for the player field.
func (r *queryResolver) Player(ctx context.Context, id string) (*models.Player, error) {
	playerID, err := strconv.Atoi(id)
	if err != nil {
		return nil, fmt.Errorf("invalid player id: %w", err)
	}
	return r.PlayerRepository.GetByID(ctx, playerID)
}

// Players is the resolver for the players field.
func (r *queryResolver) Players(ctx context.Context, accountID string) ([]*models.Player, error) {
	accID, err := strconv.Atoi(accountID)
	if err != nil {
		return nil, fmt.Errorf("invalid account id: %w", err)
	}
	return r.PlayerRepository.GetByAccountID(ctx, accID)
}

// PlayersOnline is the resolver for the playersOnline field.
func (r *queryResolver) PlayersOnline(ctx context.Context) ([]*models.Player, error) {
	var playerIDs []int
	query := `SELECT player_id FROM players_online`
	if err := r.DB.SelectContext(ctx, &playerIDs, query); err != nil {
		return nil, fmt.Errorf("failed to get online players: %w", err)
	}

	var players []*models.Player
	for _, id := range playerIDs {
		player, err := r.PlayerRepository.GetByID(ctx, id)
		if err == nil {
			players = append(players, player)
		}
	}
	return players, nil
}

// Town is the resolver for the town field.
func (r *queryResolver) Town(ctx context.Context, id string) (*models.Town, error) {
	townID, err := strconv.Atoi(id)
	if err != nil {
		return nil, fmt.Errorf("invalid town id: %w", err)
	}
	return r.TownRepository.GetByID(ctx, townID)
}

// Towns is the resolver for the towns field.
func (r *queryResolver) Towns(ctx context.Context) ([]*models.Town, error) {
	return r.TownRepository.GetAll(ctx)
}

// Guild is the resolver for the guild field.
func (r *queryResolver) Guild(ctx context.Context, id string) (*models.Guild, error) {
	guildID, err := strconv.Atoi(id)
	if err != nil {
		return nil, fmt.Errorf("invalid guild id: %w", err)
	}
	return r.GuildRepository.GetByID(ctx, guildID)
}

// Guilds is the resolver for the guilds field.
func (r *queryResolver) Guilds(ctx context.Context) ([]*models.Guild, error) {
	return r.GuildRepository.GetAll(ctx)
}

// GuildWars is the resolver for the guildWars field.
func (r *queryResolver) GuildWars(ctx context.Context, guildID *string) ([]*models.GuildWar, error) {
	var gID *int
	if guildID != nil {
		id, err := strconv.Atoi(*guildID)
		if err != nil {
			return nil, fmt.Errorf("invalid guild id: %w", err)
		}
		gID = &id
	}
	return r.GuildRepository.GetWars(ctx, gID)
}

// House is the resolver for the house field.
func (r *queryResolver) House(ctx context.Context, id string) (*models.House, error) {
	houseID, err := strconv.Atoi(id)
	if err != nil {
		return nil, fmt.Errorf("invalid house id: %w", err)
	}
	return r.HouseRepository.GetByID(ctx, houseID)
}

// Houses is the resolver for the houses field.
func (r *queryResolver) Houses(ctx context.Context, townID *string) ([]*models.House, error) {
	var tID *int
	if townID != nil {
		id, err := strconv.Atoi(*townID)
		if err != nil {
			return nil, fmt.Errorf("invalid town id: %w", err)
		}
		tID = &id
	}
	return r.HouseRepository.GetByTownID(ctx, tID)
}

// MarketOffers is the resolver for the marketOffers field.
func (r *queryResolver) MarketOffers(ctx context.Context, itemType *int) ([]*models.MarketOffer, error) {
	return r.MarketRepository.GetOffers(ctx, itemType)
}

// MarketHistory is the resolver for the marketHistory field.
func (r *queryResolver) MarketHistory(ctx context.Context, playerID string) ([]*models.MarketHistory, error) {
	pID, err := strconv.Atoi(playerID)
	if err != nil {
		return nil, fmt.Errorf("invalid player id: %w", err)
	}
	return r.MarketRepository.GetHistory(ctx, pID)
}

// Player is the resolver for the player field.
func (r *vipEntryResolver) Player(ctx context.Context, obj *models.VipEntry) (*models.Player, error) {
	return r.PlayerRepository.GetByID(ctx, obj.PlayerID)
}

// Account returns AccountResolver implementation.
func (r *Resolver) Account() AccountResolver { return &accountResolver{r} }

// AccountBan returns AccountBanResolver implementation.
func (r *Resolver) AccountBan() AccountBanResolver { return &accountBanResolver{r} }

// Guild returns GuildResolver implementation.
func (r *Resolver) Guild() GuildResolver { return &guildResolver{r} }

// GuildInvite returns GuildInviteResolver implementation.
func (r *Resolver) GuildInvite() GuildInviteResolver { return &guildInviteResolver{r} }

// GuildMembership returns GuildMembershipResolver implementation.
func (r *Resolver) GuildMembership() GuildMembershipResolver { return &guildMembershipResolver{r} }

// GuildRank returns GuildRankResolver implementation.
func (r *Resolver) GuildRank() GuildRankResolver { return &guildRankResolver{r} }

// GuildWar returns GuildWarResolver implementation.
func (r *Resolver) GuildWar() GuildWarResolver { return &guildWarResolver{r} }

// House returns HouseResolver implementation.
func (r *Resolver) House() HouseResolver { return &houseResolver{r} }

// MarketHistory returns MarketHistoryResolver implementation.
func (r *Resolver) MarketHistory() MarketHistoryResolver { return &marketHistoryResolver{r} }

// MarketOffer returns MarketOfferResolver implementation.
func (r *Resolver) MarketOffer() MarketOfferResolver { return &marketOfferResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Player returns PlayerResolver implementation.
func (r *Resolver) Player() PlayerResolver { return &playerResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// VipEntry returns VipEntryResolver implementation.
func (r *Resolver) VipEntry() VipEntryResolver { return &vipEntryResolver{r} }

type accountResolver struct{ *Resolver }
type accountBanResolver struct{ *Resolver }
type guildResolver struct{ *Resolver }
type guildInviteResolver struct{ *Resolver }
type guildMembershipResolver struct{ *Resolver }
type guildRankResolver struct{ *Resolver }
type guildWarResolver struct{ *Resolver }
type houseResolver struct{ *Resolver }
type marketHistoryResolver struct{ *Resolver }
type marketOfferResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type playerResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type vipEntryResolver struct{ *Resolver }
